
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  lastSeenAt: 'lastSeenAt',
  locale: 'locale',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  sessionToken: 'sessionToken',
  expires: 'expires',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  taxId: 'taxId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  sku: 'sku',
  description: 'description',
  unitPrice: 'unitPrice',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tenantId: 'tenantId',
  price: 'price',
  durationDays: 'durationDays',
  freeFeatures: 'freeFeatures',
  basicFeatures: 'basicFeatures',
  proFeatures: 'proFeatures',
  enterpriseFeatures: 'enterpriseFeatures',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageSubscriptionScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  packageId: 'packageId',
  status: 'status',
  seats: 'seats',
  autoRenew: 'autoRenew',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  trialEndsAt: 'trialEndsAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  invoiceNumber: 'invoiceNumber',
  invoicePrefix: 'invoicePrefix',
  date: 'date',
  dueDate: 'dueDate',
  status: 'status',
  currency: 'currency',
  currencyRate: 'currencyRate',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  amountPaid: 'amountPaid',
  balanceDue: 'balanceDue',
  note: 'note',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  invoiceId: 'invoiceId',
  itemId: 'itemId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  lineTotal: 'lineTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  invoiceId: 'invoiceId',
  date: 'date',
  paidDate: 'paidDate',
  amount: 'amount',
  method: 'method',
  status: 'status',
  reference: 'reference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  actor: 'actor',
  action: 'action',
  meta: 'meta',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserType = exports.$Enums.UserType = {
  Super_Admin: 'Super_Admin',
  Admin: 'Admin',
  User: 'User'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  PENDING: 'PENDING',
  SYNCED: 'SYNCED',
  FAILED: 'FAILED'
};

exports.packageName = exports.$Enums.packageName = {
  Free: 'Free',
  Basic: 'Basic',
  Pro: 'Pro',
  Enterprise: 'Enterprise'
};

exports.FreeFeatures = exports.$Enums.FreeFeatures = {
  Invoicing: 'Invoicing',
  Customer_Management: 'Customer_Management',
  Vendor_Management: 'Vendor_Management',
  Notifications_and_Reminders: 'Notifications_and_Reminders',
  Mobile_Access: 'Mobile_Access',
  Free_Trials: 'Free_Trials',
  Money_Back_Guarantees: 'Money_Back_Guarantees'
};

exports.BasicFeatures = exports.$Enums.BasicFeatures = {
  Inventory_Management: 'Inventory_Management',
  Payment_Tracking: 'Payment_Tracking',
  Tax_Management: 'Tax_Management',
  Reporting_and_Analytics: 'Reporting_and_Analytics',
  Expense_Tracking: 'Expense_Tracking',
  Purchase_Orders: 'Purchase_Orders',
  User_Roles_and_Permissions: 'User_Roles_and_Permissions',
  Data_Import_and_Export: 'Data_Import_and_Export',
  Community_Access: 'Community_Access'
};

exports.ProFeatures = exports.$Enums.ProFeatures = {
  Multi_Currency_Support: 'Multi_Currency_Support',
  Recurring_Invoices: 'Recurring_Invoices',
  Project_Management: 'Project_Management',
  Time_Tracking: 'Time_Tracking',
  Integrations: 'Integrations',
  Custom_Branding: 'Custom_Branding',
  API_Access: 'API_Access',
  Dashboards: 'Dashboards',
  Custom_Reports: 'Custom_Reports',
  Barcoding: 'Barcoding',
  Warehouse_Management: 'Warehouse_Management',
  Shipping_Integration: 'Shipping_Integration',
  E_Commerce_Integration: 'E_Commerce_Integration',
  CRM_Integration: 'CRM_Integration',
  Budgeting: 'Budgeting',
  Forecasting: 'Forecasting'
};

exports.EnterpriseFeatures = exports.$Enums.EnterpriseFeatures = {
  Role_Based_Access_Control: 'Role_Based_Access_Control',
  Single_Sign_On: 'Single_Sign_On',
  Two_Factor_Authentication: 'Two_Factor_Authentication',
  Data_Encryption: 'Data_Encryption',
  Audit_Trails: 'Audit_Trails',
  Cloud_Backups: 'Cloud_Backups',
  Multi_Language_Support: 'Multi_Language_Support',
  Document_Storage: 'Document_Storage',
  Compliance_Features: 'Compliance_Features',
  Advanced_Security_Features: 'Advanced_Security_Features',
  Dedicated_Account_Manager: 'Dedicated_Account_Manager',
  Service_Level_Agreements: 'Service_Level_Agreements',
  Priority_Support: 'Priority_Support',
  White_Labeling: 'White_Labeling',
  Custom_Workflows: 'Custom_Workflows',
  Approval_Processes: 'Approval_Processes',
  Data_Migration_Support: 'Data_Migration_Support',
  Performance_Guarantees: 'Performance_Guarantees',
  Uptime_Guarantees: 'Uptime_Guarantees'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  CASH: 'CASH',
  CHEQUE: 'CHEQUE',
  ONLINE: 'ONLINE',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  Session: 'Session',
  Vendor: 'Vendor',
  Customer: 'Customer',
  Item: 'Item',
  Package: 'Package',
  PackageSubscription: 'PackageSubscription',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
