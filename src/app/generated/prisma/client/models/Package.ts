
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Package` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Package
 * PACKAGES (previously "Packages")
 */
export type PackageModel = runtime.Types.Result.DefaultSelection<Prisma.$PackagePayload>

export type AggregatePackage = {
  _count: PackageCountAggregateOutputType | null
  _avg: PackageAvgAggregateOutputType | null
  _sum: PackageSumAggregateOutputType | null
  _min: PackageMinAggregateOutputType | null
  _max: PackageMaxAggregateOutputType | null
}

export type PackageAvgAggregateOutputType = {
  id: number | null
  price: runtime.Decimal | null
  durationDays: number | null
}

export type PackageSumAggregateOutputType = {
  id: number | null
  price: runtime.Decimal | null
  durationDays: number | null
}

export type PackageMinAggregateOutputType = {
  id: number | null
  name: $Enums.packageName | null
  tenantId: string | null
  price: runtime.Decimal | null
  durationDays: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PackageMaxAggregateOutputType = {
  id: number | null
  name: $Enums.packageName | null
  tenantId: string | null
  price: runtime.Decimal | null
  durationDays: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PackageCountAggregateOutputType = {
  id: number
  name: number
  tenantId: number
  price: number
  durationDays: number
  freeFeatures: number
  basicFeatures: number
  proFeatures: number
  enterpriseFeatures: number
  metadata: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PackageAvgAggregateInputType = {
  id?: true
  price?: true
  durationDays?: true
}

export type PackageSumAggregateInputType = {
  id?: true
  price?: true
  durationDays?: true
}

export type PackageMinAggregateInputType = {
  id?: true
  name?: true
  tenantId?: true
  price?: true
  durationDays?: true
  createdAt?: true
  updatedAt?: true
}

export type PackageMaxAggregateInputType = {
  id?: true
  name?: true
  tenantId?: true
  price?: true
  durationDays?: true
  createdAt?: true
  updatedAt?: true
}

export type PackageCountAggregateInputType = {
  id?: true
  name?: true
  tenantId?: true
  price?: true
  durationDays?: true
  freeFeatures?: true
  basicFeatures?: true
  proFeatures?: true
  enterpriseFeatures?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PackageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Package to aggregate.
   */
  where?: Prisma.PackageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Packages to fetch.
   */
  orderBy?: Prisma.PackageOrderByWithRelationInput | Prisma.PackageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PackageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Packages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Packages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Packages
  **/
  _count?: true | PackageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PackageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PackageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PackageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PackageMaxAggregateInputType
}

export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
      [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePackage[P]>
    : Prisma.GetScalarType<T[P], AggregatePackage[P]>
}




export type PackageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PackageWhereInput
  orderBy?: Prisma.PackageOrderByWithAggregationInput | Prisma.PackageOrderByWithAggregationInput[]
  by: Prisma.PackageScalarFieldEnum[] | Prisma.PackageScalarFieldEnum
  having?: Prisma.PackageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PackageCountAggregateInputType | true
  _avg?: PackageAvgAggregateInputType
  _sum?: PackageSumAggregateInputType
  _min?: PackageMinAggregateInputType
  _max?: PackageMaxAggregateInputType
}

export type PackageGroupByOutputType = {
  id: number
  name: $Enums.packageName
  tenantId: string
  price: runtime.Decimal
  durationDays: number
  freeFeatures: $Enums.FreeFeatures[]
  basicFeatures: $Enums.BasicFeatures[]
  proFeatures: $Enums.ProFeatures[]
  enterpriseFeatures: $Enums.EnterpriseFeatures[]
  metadata: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date | null
  _count: PackageCountAggregateOutputType | null
  _avg: PackageAvgAggregateOutputType | null
  _sum: PackageSumAggregateOutputType | null
  _min: PackageMinAggregateOutputType | null
  _max: PackageMaxAggregateOutputType | null
}

type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PackageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PackageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PackageGroupByOutputType[P]>
      }
    >
  >



export type PackageWhereInput = {
  AND?: Prisma.PackageWhereInput | Prisma.PackageWhereInput[]
  OR?: Prisma.PackageWhereInput[]
  NOT?: Prisma.PackageWhereInput | Prisma.PackageWhereInput[]
  id?: Prisma.IntFilter<"Package"> | number
  name?: Prisma.EnumpackageNameFilter<"Package"> | $Enums.packageName
  tenantId?: Prisma.StringFilter<"Package"> | string
  price?: Prisma.DecimalFilter<"Package"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFilter<"Package"> | number
  freeFeatures?: Prisma.EnumFreeFeaturesNullableListFilter<"Package">
  basicFeatures?: Prisma.EnumBasicFeaturesNullableListFilter<"Package">
  proFeatures?: Prisma.EnumProFeaturesNullableListFilter<"Package">
  enterpriseFeatures?: Prisma.EnumEnterpriseFeaturesNullableListFilter<"Package">
  metadata?: Prisma.JsonNullableFilter<"Package">
  createdAt?: Prisma.DateTimeFilter<"Package"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Package"> | Date | string | null
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  subscription?: Prisma.PackageSubscriptionListRelationFilter
}

export type PackageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
  freeFeatures?: Prisma.SortOrder
  basicFeatures?: Prisma.SortOrder
  proFeatures?: Prisma.SortOrder
  enterpriseFeatures?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  tenant?: Prisma.TenantOrderByWithRelationInput
  subscription?: Prisma.PackageSubscriptionOrderByRelationAggregateInput
}

export type PackageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: $Enums.packageName
  AND?: Prisma.PackageWhereInput | Prisma.PackageWhereInput[]
  OR?: Prisma.PackageWhereInput[]
  NOT?: Prisma.PackageWhereInput | Prisma.PackageWhereInput[]
  tenantId?: Prisma.StringFilter<"Package"> | string
  price?: Prisma.DecimalFilter<"Package"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFilter<"Package"> | number
  freeFeatures?: Prisma.EnumFreeFeaturesNullableListFilter<"Package">
  basicFeatures?: Prisma.EnumBasicFeaturesNullableListFilter<"Package">
  proFeatures?: Prisma.EnumProFeaturesNullableListFilter<"Package">
  enterpriseFeatures?: Prisma.EnumEnterpriseFeaturesNullableListFilter<"Package">
  metadata?: Prisma.JsonNullableFilter<"Package">
  createdAt?: Prisma.DateTimeFilter<"Package"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Package"> | Date | string | null
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  subscription?: Prisma.PackageSubscriptionListRelationFilter
}, "id" | "name">

export type PackageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
  freeFeatures?: Prisma.SortOrder
  basicFeatures?: Prisma.SortOrder
  proFeatures?: Prisma.SortOrder
  enterpriseFeatures?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.PackageCountOrderByAggregateInput
  _avg?: Prisma.PackageAvgOrderByAggregateInput
  _max?: Prisma.PackageMaxOrderByAggregateInput
  _min?: Prisma.PackageMinOrderByAggregateInput
  _sum?: Prisma.PackageSumOrderByAggregateInput
}

export type PackageScalarWhereWithAggregatesInput = {
  AND?: Prisma.PackageScalarWhereWithAggregatesInput | Prisma.PackageScalarWhereWithAggregatesInput[]
  OR?: Prisma.PackageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PackageScalarWhereWithAggregatesInput | Prisma.PackageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Package"> | number
  name?: Prisma.EnumpackageNameWithAggregatesFilter<"Package"> | $Enums.packageName
  tenantId?: Prisma.StringWithAggregatesFilter<"Package"> | string
  price?: Prisma.DecimalWithAggregatesFilter<"Package"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntWithAggregatesFilter<"Package"> | number
  freeFeatures?: Prisma.EnumFreeFeaturesNullableListFilter<"Package">
  basicFeatures?: Prisma.EnumBasicFeaturesNullableListFilter<"Package">
  proFeatures?: Prisma.EnumProFeaturesNullableListFilter<"Package">
  enterpriseFeatures?: Prisma.EnumEnterpriseFeaturesNullableListFilter<"Package">
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"Package">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Package"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Package"> | Date | string | null
}

export type PackageCreateInput = {
  name?: $Enums.packageName
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
  tenant: Prisma.TenantCreateNestedOneWithoutPackagesInput
  subscription?: Prisma.PackageSubscriptionCreateNestedManyWithoutPackageInput
}

export type PackageUncheckedCreateInput = {
  id?: number
  name?: $Enums.packageName
  tenantId: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
  subscription?: Prisma.PackageSubscriptionUncheckedCreateNestedManyWithoutPackageInput
}

export type PackageUpdateInput = {
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tenant?: Prisma.TenantUpdateOneRequiredWithoutPackagesNestedInput
  subscription?: Prisma.PackageSubscriptionUpdateManyWithoutPackageNestedInput
}

export type PackageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subscription?: Prisma.PackageSubscriptionUncheckedUpdateManyWithoutPackageNestedInput
}

export type PackageCreateManyInput = {
  id?: number
  name?: $Enums.packageName
  tenantId: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type PackageUpdateManyMutationInput = {
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type PackageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type PackageListRelationFilter = {
  every?: Prisma.PackageWhereInput
  some?: Prisma.PackageWhereInput
  none?: Prisma.PackageWhereInput
}

export type PackageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumFreeFeaturesNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.FreeFeatures[] | Prisma.ListEnumFreeFeaturesFieldRefInput<$PrismaModel> | null
  has?: $Enums.FreeFeatures | Prisma.EnumFreeFeaturesFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.FreeFeatures[] | Prisma.ListEnumFreeFeaturesFieldRefInput<$PrismaModel>
  hasSome?: $Enums.FreeFeatures[] | Prisma.ListEnumFreeFeaturesFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type EnumBasicFeaturesNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.BasicFeatures[] | Prisma.ListEnumBasicFeaturesFieldRefInput<$PrismaModel> | null
  has?: $Enums.BasicFeatures | Prisma.EnumBasicFeaturesFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.BasicFeatures[] | Prisma.ListEnumBasicFeaturesFieldRefInput<$PrismaModel>
  hasSome?: $Enums.BasicFeatures[] | Prisma.ListEnumBasicFeaturesFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type EnumProFeaturesNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.ProFeatures[] | Prisma.ListEnumProFeaturesFieldRefInput<$PrismaModel> | null
  has?: $Enums.ProFeatures | Prisma.EnumProFeaturesFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.ProFeatures[] | Prisma.ListEnumProFeaturesFieldRefInput<$PrismaModel>
  hasSome?: $Enums.ProFeatures[] | Prisma.ListEnumProFeaturesFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type EnumEnterpriseFeaturesNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.EnterpriseFeatures[] | Prisma.ListEnumEnterpriseFeaturesFieldRefInput<$PrismaModel> | null
  has?: $Enums.EnterpriseFeatures | Prisma.EnumEnterpriseFeaturesFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.EnterpriseFeatures[] | Prisma.ListEnumEnterpriseFeaturesFieldRefInput<$PrismaModel>
  hasSome?: $Enums.EnterpriseFeatures[] | Prisma.ListEnumEnterpriseFeaturesFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type PackageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
  freeFeatures?: Prisma.SortOrder
  basicFeatures?: Prisma.SortOrder
  proFeatures?: Prisma.SortOrder
  enterpriseFeatures?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
}

export type PackageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  durationDays?: Prisma.SortOrder
}

export type PackageScalarRelationFilter = {
  is?: Prisma.PackageWhereInput
  isNot?: Prisma.PackageWhereInput
}

export type PackageCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput> | Prisma.PackageCreateWithoutTenantInput[] | Prisma.PackageUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutTenantInput | Prisma.PackageCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.PackageCreateManyTenantInputEnvelope
  connect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
}

export type PackageUncheckedCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput> | Prisma.PackageCreateWithoutTenantInput[] | Prisma.PackageUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutTenantInput | Prisma.PackageCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.PackageCreateManyTenantInputEnvelope
  connect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
}

export type PackageUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput> | Prisma.PackageCreateWithoutTenantInput[] | Prisma.PackageUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutTenantInput | Prisma.PackageCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.PackageUpsertWithWhereUniqueWithoutTenantInput | Prisma.PackageUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.PackageCreateManyTenantInputEnvelope
  set?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  disconnect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  delete?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  connect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  update?: Prisma.PackageUpdateWithWhereUniqueWithoutTenantInput | Prisma.PackageUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.PackageUpdateManyWithWhereWithoutTenantInput | Prisma.PackageUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.PackageScalarWhereInput | Prisma.PackageScalarWhereInput[]
}

export type PackageUncheckedUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput> | Prisma.PackageCreateWithoutTenantInput[] | Prisma.PackageUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutTenantInput | Prisma.PackageCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.PackageUpsertWithWhereUniqueWithoutTenantInput | Prisma.PackageUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.PackageCreateManyTenantInputEnvelope
  set?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  disconnect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  delete?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  connect?: Prisma.PackageWhereUniqueInput | Prisma.PackageWhereUniqueInput[]
  update?: Prisma.PackageUpdateWithWhereUniqueWithoutTenantInput | Prisma.PackageUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.PackageUpdateManyWithWhereWithoutTenantInput | Prisma.PackageUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.PackageScalarWhereInput | Prisma.PackageScalarWhereInput[]
}

export type PackageCreatefreeFeaturesInput = {
  set: $Enums.FreeFeatures[]
}

export type PackageCreatebasicFeaturesInput = {
  set: $Enums.BasicFeatures[]
}

export type PackageCreateproFeaturesInput = {
  set: $Enums.ProFeatures[]
}

export type PackageCreateenterpriseFeaturesInput = {
  set: $Enums.EnterpriseFeatures[]
}

export type EnumpackageNameFieldUpdateOperationsInput = {
  set?: $Enums.packageName
}

export type PackageUpdatefreeFeaturesInput = {
  set?: $Enums.FreeFeatures[]
  push?: $Enums.FreeFeatures | $Enums.FreeFeatures[]
}

export type PackageUpdatebasicFeaturesInput = {
  set?: $Enums.BasicFeatures[]
  push?: $Enums.BasicFeatures | $Enums.BasicFeatures[]
}

export type PackageUpdateproFeaturesInput = {
  set?: $Enums.ProFeatures[]
  push?: $Enums.ProFeatures | $Enums.ProFeatures[]
}

export type PackageUpdateenterpriseFeaturesInput = {
  set?: $Enums.EnterpriseFeatures[]
  push?: $Enums.EnterpriseFeatures | $Enums.EnterpriseFeatures[]
}

export type PackageCreateNestedOneWithoutSubscriptionInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutSubscriptionInput, Prisma.PackageUncheckedCreateWithoutSubscriptionInput>
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutSubscriptionInput
  connect?: Prisma.PackageWhereUniqueInput
}

export type PackageUpdateOneRequiredWithoutSubscriptionNestedInput = {
  create?: Prisma.XOR<Prisma.PackageCreateWithoutSubscriptionInput, Prisma.PackageUncheckedCreateWithoutSubscriptionInput>
  connectOrCreate?: Prisma.PackageCreateOrConnectWithoutSubscriptionInput
  upsert?: Prisma.PackageUpsertWithoutSubscriptionInput
  connect?: Prisma.PackageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PackageUpdateToOneWithWhereWithoutSubscriptionInput, Prisma.PackageUpdateWithoutSubscriptionInput>, Prisma.PackageUncheckedUpdateWithoutSubscriptionInput>
}

export type PackageCreateWithoutTenantInput = {
  name?: $Enums.packageName
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
  subscription?: Prisma.PackageSubscriptionCreateNestedManyWithoutPackageInput
}

export type PackageUncheckedCreateWithoutTenantInput = {
  id?: number
  name?: $Enums.packageName
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
  subscription?: Prisma.PackageSubscriptionUncheckedCreateNestedManyWithoutPackageInput
}

export type PackageCreateOrConnectWithoutTenantInput = {
  where: Prisma.PackageWhereUniqueInput
  create: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput>
}

export type PackageCreateManyTenantInputEnvelope = {
  data: Prisma.PackageCreateManyTenantInput | Prisma.PackageCreateManyTenantInput[]
  skipDuplicates?: boolean
}

export type PackageUpsertWithWhereUniqueWithoutTenantInput = {
  where: Prisma.PackageWhereUniqueInput
  update: Prisma.XOR<Prisma.PackageUpdateWithoutTenantInput, Prisma.PackageUncheckedUpdateWithoutTenantInput>
  create: Prisma.XOR<Prisma.PackageCreateWithoutTenantInput, Prisma.PackageUncheckedCreateWithoutTenantInput>
}

export type PackageUpdateWithWhereUniqueWithoutTenantInput = {
  where: Prisma.PackageWhereUniqueInput
  data: Prisma.XOR<Prisma.PackageUpdateWithoutTenantInput, Prisma.PackageUncheckedUpdateWithoutTenantInput>
}

export type PackageUpdateManyWithWhereWithoutTenantInput = {
  where: Prisma.PackageScalarWhereInput
  data: Prisma.XOR<Prisma.PackageUpdateManyMutationInput, Prisma.PackageUncheckedUpdateManyWithoutTenantInput>
}

export type PackageScalarWhereInput = {
  AND?: Prisma.PackageScalarWhereInput | Prisma.PackageScalarWhereInput[]
  OR?: Prisma.PackageScalarWhereInput[]
  NOT?: Prisma.PackageScalarWhereInput | Prisma.PackageScalarWhereInput[]
  id?: Prisma.IntFilter<"Package"> | number
  name?: Prisma.EnumpackageNameFilter<"Package"> | $Enums.packageName
  tenantId?: Prisma.StringFilter<"Package"> | string
  price?: Prisma.DecimalFilter<"Package"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFilter<"Package"> | number
  freeFeatures?: Prisma.EnumFreeFeaturesNullableListFilter<"Package">
  basicFeatures?: Prisma.EnumBasicFeaturesNullableListFilter<"Package">
  proFeatures?: Prisma.EnumProFeaturesNullableListFilter<"Package">
  enterpriseFeatures?: Prisma.EnumEnterpriseFeaturesNullableListFilter<"Package">
  metadata?: Prisma.JsonNullableFilter<"Package">
  createdAt?: Prisma.DateTimeFilter<"Package"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Package"> | Date | string | null
}

export type PackageCreateWithoutSubscriptionInput = {
  name?: $Enums.packageName
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
  tenant: Prisma.TenantCreateNestedOneWithoutPackagesInput
}

export type PackageUncheckedCreateWithoutSubscriptionInput = {
  id?: number
  name?: $Enums.packageName
  tenantId: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type PackageCreateOrConnectWithoutSubscriptionInput = {
  where: Prisma.PackageWhereUniqueInput
  create: Prisma.XOR<Prisma.PackageCreateWithoutSubscriptionInput, Prisma.PackageUncheckedCreateWithoutSubscriptionInput>
}

export type PackageUpsertWithoutSubscriptionInput = {
  update: Prisma.XOR<Prisma.PackageUpdateWithoutSubscriptionInput, Prisma.PackageUncheckedUpdateWithoutSubscriptionInput>
  create: Prisma.XOR<Prisma.PackageCreateWithoutSubscriptionInput, Prisma.PackageUncheckedCreateWithoutSubscriptionInput>
  where?: Prisma.PackageWhereInput
}

export type PackageUpdateToOneWithWhereWithoutSubscriptionInput = {
  where?: Prisma.PackageWhereInput
  data: Prisma.XOR<Prisma.PackageUpdateWithoutSubscriptionInput, Prisma.PackageUncheckedUpdateWithoutSubscriptionInput>
}

export type PackageUpdateWithoutSubscriptionInput = {
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tenant?: Prisma.TenantUpdateOneRequiredWithoutPackagesNestedInput
}

export type PackageUncheckedUpdateWithoutSubscriptionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type PackageCreateManyTenantInput = {
  id?: number
  name?: $Enums.packageName
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays: number
  freeFeatures?: Prisma.PackageCreatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageCreatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageCreateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageCreateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type PackageUpdateWithoutTenantInput = {
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subscription?: Prisma.PackageSubscriptionUpdateManyWithoutPackageNestedInput
}

export type PackageUncheckedUpdateWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subscription?: Prisma.PackageSubscriptionUncheckedUpdateManyWithoutPackageNestedInput
}

export type PackageUncheckedUpdateManyWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  durationDays?: Prisma.IntFieldUpdateOperationsInput | number
  freeFeatures?: Prisma.PackageUpdatefreeFeaturesInput | $Enums.FreeFeatures[]
  basicFeatures?: Prisma.PackageUpdatebasicFeaturesInput | $Enums.BasicFeatures[]
  proFeatures?: Prisma.PackageUpdateproFeaturesInput | $Enums.ProFeatures[]
  enterpriseFeatures?: Prisma.PackageUpdateenterpriseFeaturesInput | $Enums.EnterpriseFeatures[]
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type PackageCountOutputType
 */

export type PackageCountOutputType = {
  subscription: number
}

export type PackageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subscription?: boolean | PackageCountOutputTypeCountSubscriptionArgs
}

/**
 * PackageCountOutputType without action
 */
export type PackageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageCountOutputType
   */
  select?: Prisma.PackageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PackageCountOutputType without action
 */
export type PackageCountOutputTypeCountSubscriptionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PackageSubscriptionWhereInput
}


export type PackageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  tenantId?: boolean
  price?: boolean
  durationDays?: boolean
  freeFeatures?: boolean
  basicFeatures?: boolean
  proFeatures?: boolean
  enterpriseFeatures?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  subscription?: boolean | Prisma.Package$subscriptionArgs<ExtArgs>
  _count?: boolean | Prisma.PackageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["package"]>

export type PackageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  tenantId?: boolean
  price?: boolean
  durationDays?: boolean
  freeFeatures?: boolean
  basicFeatures?: boolean
  proFeatures?: boolean
  enterpriseFeatures?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["package"]>

export type PackageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  tenantId?: boolean
  price?: boolean
  durationDays?: boolean
  freeFeatures?: boolean
  basicFeatures?: boolean
  proFeatures?: boolean
  enterpriseFeatures?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["package"]>

export type PackageSelectScalar = {
  id?: boolean
  name?: boolean
  tenantId?: boolean
  price?: boolean
  durationDays?: boolean
  freeFeatures?: boolean
  basicFeatures?: boolean
  proFeatures?: boolean
  enterpriseFeatures?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PackageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "tenantId" | "price" | "durationDays" | "freeFeatures" | "basicFeatures" | "proFeatures" | "enterpriseFeatures" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["package"]>
export type PackageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  subscription?: boolean | Prisma.Package$subscriptionArgs<ExtArgs>
  _count?: boolean | Prisma.PackageCountOutputTypeDefaultArgs<ExtArgs>
}
export type PackageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}
export type PackageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}

export type $PackagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Package"
  objects: {
    tenant: Prisma.$TenantPayload<ExtArgs>
    subscription: Prisma.$PackageSubscriptionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: $Enums.packageName
    tenantId: string
    price: runtime.Decimal
    durationDays: number
    freeFeatures: $Enums.FreeFeatures[]
    basicFeatures: $Enums.BasicFeatures[]
    proFeatures: $Enums.ProFeatures[]
    enterpriseFeatures: $Enums.EnterpriseFeatures[]
    metadata: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date | null
  }, ExtArgs["result"]["package"]>
  composites: {}
}

export type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PackagePayload, S>

export type PackageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PackageCountAggregateInputType | true
  }

export interface PackageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
  /**
   * Find zero or one Package that matches the filter.
   * @param {PackageFindUniqueArgs} args - Arguments to find a Package
   * @example
   * // Get one Package
   * const package = await prisma.package.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PackageFindUniqueArgs>(args: Prisma.SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Package that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
   * @example
   * // Get one Package
   * const package = await prisma.package.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Package that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageFindFirstArgs} args - Arguments to find a Package
   * @example
   * // Get one Package
   * const package = await prisma.package.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PackageFindFirstArgs>(args?: Prisma.SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Package that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
   * @example
   * // Get one Package
   * const package = await prisma.package.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Packages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Packages
   * const packages = await prisma.package.findMany()
   * 
   * // Get first 10 Packages
   * const packages = await prisma.package.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PackageFindManyArgs>(args?: Prisma.SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Package.
   * @param {PackageCreateArgs} args - Arguments to create a Package.
   * @example
   * // Create one Package
   * const Package = await prisma.package.create({
   *   data: {
   *     // ... data to create a Package
   *   }
   * })
   * 
   */
  create<T extends PackageCreateArgs>(args: Prisma.SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Packages.
   * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
   * @example
   * // Create many Packages
   * const package = await prisma.package.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PackageCreateManyArgs>(args?: Prisma.SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Packages and returns the data saved in the database.
   * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
   * @example
   * // Create many Packages
   * const package = await prisma.package.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Packages and only return the `id`
   * const packageWithIdOnly = await prisma.package.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Package.
   * @param {PackageDeleteArgs} args - Arguments to delete one Package.
   * @example
   * // Delete one Package
   * const Package = await prisma.package.delete({
   *   where: {
   *     // ... filter to delete one Package
   *   }
   * })
   * 
   */
  delete<T extends PackageDeleteArgs>(args: Prisma.SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Package.
   * @param {PackageUpdateArgs} args - Arguments to update one Package.
   * @example
   * // Update one Package
   * const package = await prisma.package.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PackageUpdateArgs>(args: Prisma.SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Packages.
   * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
   * @example
   * // Delete a few Packages
   * const { count } = await prisma.package.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PackageDeleteManyArgs>(args?: Prisma.SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Packages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Packages
   * const package = await prisma.package.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PackageUpdateManyArgs>(args: Prisma.SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Packages and returns the data updated in the database.
   * @param {PackageUpdateManyAndReturnArgs} args - Arguments to update many Packages.
   * @example
   * // Update many Packages
   * const package = await prisma.package.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Packages and only return the `id`
   * const packageWithIdOnly = await prisma.package.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PackageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Package.
   * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
   * @example
   * // Update or create a Package
   * const package = await prisma.package.upsert({
   *   create: {
   *     // ... data to create a Package
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Package we want to update
   *   }
   * })
   */
  upsert<T extends PackageUpsertArgs>(args: Prisma.SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Packages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageCountArgs} args - Arguments to filter Packages to count.
   * @example
   * // Count the number of Packages
   * const count = await prisma.package.count({
   *   where: {
   *     // ... the filter for the Packages we want to count
   *   }
   * })
  **/
  count<T extends PackageCountArgs>(
    args?: Prisma.Subset<T, PackageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PackageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Package.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PackageAggregateArgs>(args: Prisma.Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

  /**
   * Group by Package.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PackageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PackageGroupByArgs['orderBy'] }
      : { orderBy?: PackageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Package model
 */
readonly fields: PackageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Package.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PackageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tenant<T extends Prisma.TenantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TenantDefaultArgs<ExtArgs>>): Prisma.Prisma__TenantClient<runtime.Types.Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subscription<T extends Prisma.Package$subscriptionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Package$subscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Package model
 */
export interface PackageFieldRefs {
  readonly id: Prisma.FieldRef<"Package", 'Int'>
  readonly name: Prisma.FieldRef<"Package", 'packageName'>
  readonly tenantId: Prisma.FieldRef<"Package", 'String'>
  readonly price: Prisma.FieldRef<"Package", 'Decimal'>
  readonly durationDays: Prisma.FieldRef<"Package", 'Int'>
  readonly freeFeatures: Prisma.FieldRef<"Package", 'FreeFeatures[]'>
  readonly basicFeatures: Prisma.FieldRef<"Package", 'BasicFeatures[]'>
  readonly proFeatures: Prisma.FieldRef<"Package", 'ProFeatures[]'>
  readonly enterpriseFeatures: Prisma.FieldRef<"Package", 'EnterpriseFeatures[]'>
  readonly metadata: Prisma.FieldRef<"Package", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Package", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Package", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Package findUnique
 */
export type PackageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter, which Package to fetch.
   */
  where: Prisma.PackageWhereUniqueInput
}

/**
 * Package findUniqueOrThrow
 */
export type PackageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter, which Package to fetch.
   */
  where: Prisma.PackageWhereUniqueInput
}

/**
 * Package findFirst
 */
export type PackageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter, which Package to fetch.
   */
  where?: Prisma.PackageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Packages to fetch.
   */
  orderBy?: Prisma.PackageOrderByWithRelationInput | Prisma.PackageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Packages.
   */
  cursor?: Prisma.PackageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Packages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Packages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Packages.
   */
  distinct?: Prisma.PackageScalarFieldEnum | Prisma.PackageScalarFieldEnum[]
}

/**
 * Package findFirstOrThrow
 */
export type PackageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter, which Package to fetch.
   */
  where?: Prisma.PackageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Packages to fetch.
   */
  orderBy?: Prisma.PackageOrderByWithRelationInput | Prisma.PackageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Packages.
   */
  cursor?: Prisma.PackageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Packages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Packages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Packages.
   */
  distinct?: Prisma.PackageScalarFieldEnum | Prisma.PackageScalarFieldEnum[]
}

/**
 * Package findMany
 */
export type PackageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter, which Packages to fetch.
   */
  where?: Prisma.PackageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Packages to fetch.
   */
  orderBy?: Prisma.PackageOrderByWithRelationInput | Prisma.PackageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Packages.
   */
  cursor?: Prisma.PackageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Packages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Packages.
   */
  skip?: number
  distinct?: Prisma.PackageScalarFieldEnum | Prisma.PackageScalarFieldEnum[]
}

/**
 * Package create
 */
export type PackageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * The data needed to create a Package.
   */
  data: Prisma.XOR<Prisma.PackageCreateInput, Prisma.PackageUncheckedCreateInput>
}

/**
 * Package createMany
 */
export type PackageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Packages.
   */
  data: Prisma.PackageCreateManyInput | Prisma.PackageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Package createManyAndReturn
 */
export type PackageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * The data used to create many Packages.
   */
  data: Prisma.PackageCreateManyInput | Prisma.PackageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Package update
 */
export type PackageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * The data needed to update a Package.
   */
  data: Prisma.XOR<Prisma.PackageUpdateInput, Prisma.PackageUncheckedUpdateInput>
  /**
   * Choose, which Package to update.
   */
  where: Prisma.PackageWhereUniqueInput
}

/**
 * Package updateMany
 */
export type PackageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Packages.
   */
  data: Prisma.XOR<Prisma.PackageUpdateManyMutationInput, Prisma.PackageUncheckedUpdateManyInput>
  /**
   * Filter which Packages to update
   */
  where?: Prisma.PackageWhereInput
  /**
   * Limit how many Packages to update.
   */
  limit?: number
}

/**
 * Package updateManyAndReturn
 */
export type PackageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * The data used to update Packages.
   */
  data: Prisma.XOR<Prisma.PackageUpdateManyMutationInput, Prisma.PackageUncheckedUpdateManyInput>
  /**
   * Filter which Packages to update
   */
  where?: Prisma.PackageWhereInput
  /**
   * Limit how many Packages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Package upsert
 */
export type PackageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * The filter to search for the Package to update in case it exists.
   */
  where: Prisma.PackageWhereUniqueInput
  /**
   * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
   */
  create: Prisma.XOR<Prisma.PackageCreateInput, Prisma.PackageUncheckedCreateInput>
  /**
   * In case the Package was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PackageUpdateInput, Prisma.PackageUncheckedUpdateInput>
}

/**
 * Package delete
 */
export type PackageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
  /**
   * Filter which Package to delete.
   */
  where: Prisma.PackageWhereUniqueInput
}

/**
 * Package deleteMany
 */
export type PackageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Packages to delete
   */
  where?: Prisma.PackageWhereInput
  /**
   * Limit how many Packages to delete.
   */
  limit?: number
}

/**
 * Package.subscription
 */
export type Package$subscriptionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  where?: Prisma.PackageSubscriptionWhereInput
  orderBy?: Prisma.PackageSubscriptionOrderByWithRelationInput | Prisma.PackageSubscriptionOrderByWithRelationInput[]
  cursor?: Prisma.PackageSubscriptionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PackageSubscriptionScalarFieldEnum | Prisma.PackageSubscriptionScalarFieldEnum[]
}

/**
 * Package without action
 */
export type PackageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Package
   */
  select?: Prisma.PackageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Package
   */
  omit?: Prisma.PackageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageInclude<ExtArgs> | null
}
