
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PackageSubscription` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PackageSubscription
 * 
 */
export type PackageSubscriptionModel = runtime.Types.Result.DefaultSelection<Prisma.$PackageSubscriptionPayload>

export type AggregatePackageSubscription = {
  _count: PackageSubscriptionCountAggregateOutputType | null
  _avg: PackageSubscriptionAvgAggregateOutputType | null
  _sum: PackageSubscriptionSumAggregateOutputType | null
  _min: PackageSubscriptionMinAggregateOutputType | null
  _max: PackageSubscriptionMaxAggregateOutputType | null
}

export type PackageSubscriptionAvgAggregateOutputType = {
  id: number | null
  packageId: number | null
  packagePrice: runtime.Decimal | null
  packageTrialPrice: runtime.Decimal | null
  amountPaid: runtime.Decimal | null
}

export type PackageSubscriptionSumAggregateOutputType = {
  id: number | null
  packageId: number | null
  packagePrice: runtime.Decimal | null
  packageTrialPrice: runtime.Decimal | null
  amountPaid: runtime.Decimal | null
}

export type PackageSubscriptionMinAggregateOutputType = {
  id: number | null
  tenantId: string | null
  packageId: number | null
  packageName: $Enums.packageName | null
  packagePrice: runtime.Decimal | null
  packageTrialPrice: runtime.Decimal | null
  status: $Enums.SubscriptionStatus | null
  amountPaid: runtime.Decimal | null
  startsAt: Date | null
  endsAt: Date | null
  trialEndsAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PackageSubscriptionMaxAggregateOutputType = {
  id: number | null
  tenantId: string | null
  packageId: number | null
  packageName: $Enums.packageName | null
  packagePrice: runtime.Decimal | null
  packageTrialPrice: runtime.Decimal | null
  status: $Enums.SubscriptionStatus | null
  amountPaid: runtime.Decimal | null
  startsAt: Date | null
  endsAt: Date | null
  trialEndsAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PackageSubscriptionCountAggregateOutputType = {
  id: number
  tenantId: number
  packageId: number
  packageName: number
  packagePrice: number
  packageTrialPrice: number
  status: number
  amountPaid: number
  startsAt: number
  endsAt: number
  trialEndsAt: number
  metadata: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PackageSubscriptionAvgAggregateInputType = {
  id?: true
  packageId?: true
  packagePrice?: true
  packageTrialPrice?: true
  amountPaid?: true
}

export type PackageSubscriptionSumAggregateInputType = {
  id?: true
  packageId?: true
  packagePrice?: true
  packageTrialPrice?: true
  amountPaid?: true
}

export type PackageSubscriptionMinAggregateInputType = {
  id?: true
  tenantId?: true
  packageId?: true
  packageName?: true
  packagePrice?: true
  packageTrialPrice?: true
  status?: true
  amountPaid?: true
  startsAt?: true
  endsAt?: true
  trialEndsAt?: true
  createdAt?: true
  updatedAt?: true
}

export type PackageSubscriptionMaxAggregateInputType = {
  id?: true
  tenantId?: true
  packageId?: true
  packageName?: true
  packagePrice?: true
  packageTrialPrice?: true
  status?: true
  amountPaid?: true
  startsAt?: true
  endsAt?: true
  trialEndsAt?: true
  createdAt?: true
  updatedAt?: true
}

export type PackageSubscriptionCountAggregateInputType = {
  id?: true
  tenantId?: true
  packageId?: true
  packageName?: true
  packagePrice?: true
  packageTrialPrice?: true
  status?: true
  amountPaid?: true
  startsAt?: true
  endsAt?: true
  trialEndsAt?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PackageSubscriptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PackageSubscription to aggregate.
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PackageSubscriptions to fetch.
   */
  orderBy?: Prisma.PackageSubscriptionOrderByWithRelationInput | Prisma.PackageSubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PackageSubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PackageSubscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PackageSubscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PackageSubscriptions
  **/
  _count?: true | PackageSubscriptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PackageSubscriptionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PackageSubscriptionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PackageSubscriptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PackageSubscriptionMaxAggregateInputType
}

export type GetPackageSubscriptionAggregateType<T extends PackageSubscriptionAggregateArgs> = {
      [P in keyof T & keyof AggregatePackageSubscription]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePackageSubscription[P]>
    : Prisma.GetScalarType<T[P], AggregatePackageSubscription[P]>
}




export type PackageSubscriptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PackageSubscriptionWhereInput
  orderBy?: Prisma.PackageSubscriptionOrderByWithAggregationInput | Prisma.PackageSubscriptionOrderByWithAggregationInput[]
  by: Prisma.PackageSubscriptionScalarFieldEnum[] | Prisma.PackageSubscriptionScalarFieldEnum
  having?: Prisma.PackageSubscriptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PackageSubscriptionCountAggregateInputType | true
  _avg?: PackageSubscriptionAvgAggregateInputType
  _sum?: PackageSubscriptionSumAggregateInputType
  _min?: PackageSubscriptionMinAggregateInputType
  _max?: PackageSubscriptionMaxAggregateInputType
}

export type PackageSubscriptionGroupByOutputType = {
  id: number
  tenantId: string
  packageId: number
  packageName: $Enums.packageName
  packagePrice: runtime.Decimal
  packageTrialPrice: runtime.Decimal
  status: $Enums.SubscriptionStatus
  amountPaid: runtime.Decimal
  startsAt: Date
  endsAt: Date | null
  trialEndsAt: Date | null
  metadata: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  _count: PackageSubscriptionCountAggregateOutputType | null
  _avg: PackageSubscriptionAvgAggregateOutputType | null
  _sum: PackageSubscriptionSumAggregateOutputType | null
  _min: PackageSubscriptionMinAggregateOutputType | null
  _max: PackageSubscriptionMaxAggregateOutputType | null
}

type GetPackageSubscriptionGroupByPayload<T extends PackageSubscriptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PackageSubscriptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PackageSubscriptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PackageSubscriptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PackageSubscriptionGroupByOutputType[P]>
      }
    >
  >



export type PackageSubscriptionWhereInput = {
  AND?: Prisma.PackageSubscriptionWhereInput | Prisma.PackageSubscriptionWhereInput[]
  OR?: Prisma.PackageSubscriptionWhereInput[]
  NOT?: Prisma.PackageSubscriptionWhereInput | Prisma.PackageSubscriptionWhereInput[]
  id?: Prisma.IntFilter<"PackageSubscription"> | number
  tenantId?: Prisma.UuidFilter<"PackageSubscription"> | string
  packageId?: Prisma.IntFilter<"PackageSubscription"> | number
  packageName?: Prisma.EnumpackageNameFilter<"PackageSubscription"> | $Enums.packageName
  packagePrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFilter<"PackageSubscription"> | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  endsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  trialEndsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  metadata?: Prisma.JsonNullableFilter<"PackageSubscription">
  createdAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  package?: Prisma.XOR<Prisma.PackageScalarRelationFilter, Prisma.PackageWhereInput>
}

export type PackageSubscriptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packageName?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  startsAt?: Prisma.SortOrder
  endsAt?: Prisma.SortOrderInput | Prisma.SortOrder
  trialEndsAt?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tenant?: Prisma.TenantOrderByWithRelationInput
  package?: Prisma.PackageOrderByWithRelationInput
}

export type PackageSubscriptionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  packageName?: $Enums.packageName
  AND?: Prisma.PackageSubscriptionWhereInput | Prisma.PackageSubscriptionWhereInput[]
  OR?: Prisma.PackageSubscriptionWhereInput[]
  NOT?: Prisma.PackageSubscriptionWhereInput | Prisma.PackageSubscriptionWhereInput[]
  tenantId?: Prisma.UuidFilter<"PackageSubscription"> | string
  packageId?: Prisma.IntFilter<"PackageSubscription"> | number
  packagePrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFilter<"PackageSubscription"> | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  endsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  trialEndsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  metadata?: Prisma.JsonNullableFilter<"PackageSubscription">
  createdAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  package?: Prisma.XOR<Prisma.PackageScalarRelationFilter, Prisma.PackageWhereInput>
}, "id" | "packageName">

export type PackageSubscriptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packageName?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  startsAt?: Prisma.SortOrder
  endsAt?: Prisma.SortOrderInput | Prisma.SortOrder
  trialEndsAt?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PackageSubscriptionCountOrderByAggregateInput
  _avg?: Prisma.PackageSubscriptionAvgOrderByAggregateInput
  _max?: Prisma.PackageSubscriptionMaxOrderByAggregateInput
  _min?: Prisma.PackageSubscriptionMinOrderByAggregateInput
  _sum?: Prisma.PackageSubscriptionSumOrderByAggregateInput
}

export type PackageSubscriptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PackageSubscriptionScalarWhereWithAggregatesInput | Prisma.PackageSubscriptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PackageSubscriptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PackageSubscriptionScalarWhereWithAggregatesInput | Prisma.PackageSubscriptionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PackageSubscription"> | number
  tenantId?: Prisma.UuidWithAggregatesFilter<"PackageSubscription"> | string
  packageId?: Prisma.IntWithAggregatesFilter<"PackageSubscription"> | number
  packageName?: Prisma.EnumpackageNameWithAggregatesFilter<"PackageSubscription"> | $Enums.packageName
  packagePrice?: Prisma.DecimalWithAggregatesFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalWithAggregatesFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusWithAggregatesFilter<"PackageSubscription"> | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalWithAggregatesFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeWithAggregatesFilter<"PackageSubscription"> | Date | string
  endsAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PackageSubscription"> | Date | string | null
  trialEndsAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PackageSubscription"> | Date | string | null
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"PackageSubscription">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PackageSubscription"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PackageSubscription"> | Date | string
}

export type PackageSubscriptionCreateInput = {
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  tenant: Prisma.TenantCreateNestedOneWithoutSubscriptionInput
  package: Prisma.PackageCreateNestedOneWithoutSubscriptionInput
}

export type PackageSubscriptionUncheckedCreateInput = {
  id?: number
  tenantId: string
  packageId: number
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionUpdateInput = {
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tenant?: Prisma.TenantUpdateOneRequiredWithoutSubscriptionNestedInput
  package?: Prisma.PackageUpdateOneRequiredWithoutSubscriptionNestedInput
}

export type PackageSubscriptionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  packageId?: Prisma.IntFieldUpdateOperationsInput | number
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionCreateManyInput = {
  id?: number
  tenantId: string
  packageId: number
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionUpdateManyMutationInput = {
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  packageId?: Prisma.IntFieldUpdateOperationsInput | number
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionListRelationFilter = {
  every?: Prisma.PackageSubscriptionWhereInput
  some?: Prisma.PackageSubscriptionWhereInput
  none?: Prisma.PackageSubscriptionWhereInput
}

export type PackageSubscriptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PackageSubscriptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packageName?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  startsAt?: Prisma.SortOrder
  endsAt?: Prisma.SortOrder
  trialEndsAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageSubscriptionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type PackageSubscriptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packageName?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  startsAt?: Prisma.SortOrder
  endsAt?: Prisma.SortOrder
  trialEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageSubscriptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packageName?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  startsAt?: Prisma.SortOrder
  endsAt?: Prisma.SortOrder
  trialEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PackageSubscriptionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  packageId?: Prisma.SortOrder
  packagePrice?: Prisma.SortOrder
  packageTrialPrice?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type PackageSubscriptionCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput> | Prisma.PackageSubscriptionCreateWithoutTenantInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput | Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyTenantInputEnvelope
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
}

export type PackageSubscriptionUncheckedCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput> | Prisma.PackageSubscriptionCreateWithoutTenantInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput | Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyTenantInputEnvelope
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
}

export type PackageSubscriptionUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput> | Prisma.PackageSubscriptionCreateWithoutTenantInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput | Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutTenantInput | Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyTenantInputEnvelope
  set?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  disconnect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  delete?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  update?: Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutTenantInput | Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.PackageSubscriptionUpdateManyWithWhereWithoutTenantInput | Prisma.PackageSubscriptionUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
}

export type PackageSubscriptionUncheckedUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput> | Prisma.PackageSubscriptionCreateWithoutTenantInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput | Prisma.PackageSubscriptionCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutTenantInput | Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyTenantInputEnvelope
  set?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  disconnect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  delete?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  update?: Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutTenantInput | Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.PackageSubscriptionUpdateManyWithWhereWithoutTenantInput | Prisma.PackageSubscriptionUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
}

export type PackageSubscriptionCreateNestedManyWithoutPackageInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput> | Prisma.PackageSubscriptionCreateWithoutPackageInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput | Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyPackageInputEnvelope
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
}

export type PackageSubscriptionUncheckedCreateNestedManyWithoutPackageInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput> | Prisma.PackageSubscriptionCreateWithoutPackageInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput | Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyPackageInputEnvelope
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
}

export type PackageSubscriptionUpdateManyWithoutPackageNestedInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput> | Prisma.PackageSubscriptionCreateWithoutPackageInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput | Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput[]
  upsert?: Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutPackageInput | Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutPackageInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyPackageInputEnvelope
  set?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  disconnect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  delete?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  update?: Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutPackageInput | Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutPackageInput[]
  updateMany?: Prisma.PackageSubscriptionUpdateManyWithWhereWithoutPackageInput | Prisma.PackageSubscriptionUpdateManyWithWhereWithoutPackageInput[]
  deleteMany?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
}

export type PackageSubscriptionUncheckedUpdateManyWithoutPackageNestedInput = {
  create?: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput> | Prisma.PackageSubscriptionCreateWithoutPackageInput[] | Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput[]
  connectOrCreate?: Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput | Prisma.PackageSubscriptionCreateOrConnectWithoutPackageInput[]
  upsert?: Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutPackageInput | Prisma.PackageSubscriptionUpsertWithWhereUniqueWithoutPackageInput[]
  createMany?: Prisma.PackageSubscriptionCreateManyPackageInputEnvelope
  set?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  disconnect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  delete?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  connect?: Prisma.PackageSubscriptionWhereUniqueInput | Prisma.PackageSubscriptionWhereUniqueInput[]
  update?: Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutPackageInput | Prisma.PackageSubscriptionUpdateWithWhereUniqueWithoutPackageInput[]
  updateMany?: Prisma.PackageSubscriptionUpdateManyWithWhereWithoutPackageInput | Prisma.PackageSubscriptionUpdateManyWithWhereWithoutPackageInput[]
  deleteMany?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
}

export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
  set?: $Enums.SubscriptionStatus
}

export type PackageSubscriptionCreateWithoutTenantInput = {
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  package: Prisma.PackageCreateNestedOneWithoutSubscriptionInput
}

export type PackageSubscriptionUncheckedCreateWithoutTenantInput = {
  id?: number
  packageId: number
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionCreateOrConnectWithoutTenantInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput>
}

export type PackageSubscriptionCreateManyTenantInputEnvelope = {
  data: Prisma.PackageSubscriptionCreateManyTenantInput | Prisma.PackageSubscriptionCreateManyTenantInput[]
  skipDuplicates?: boolean
}

export type PackageSubscriptionUpsertWithWhereUniqueWithoutTenantInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  update: Prisma.XOR<Prisma.PackageSubscriptionUpdateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedUpdateWithoutTenantInput>
  create: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedCreateWithoutTenantInput>
}

export type PackageSubscriptionUpdateWithWhereUniqueWithoutTenantInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateWithoutTenantInput, Prisma.PackageSubscriptionUncheckedUpdateWithoutTenantInput>
}

export type PackageSubscriptionUpdateManyWithWhereWithoutTenantInput = {
  where: Prisma.PackageSubscriptionScalarWhereInput
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateManyMutationInput, Prisma.PackageSubscriptionUncheckedUpdateManyWithoutTenantInput>
}

export type PackageSubscriptionScalarWhereInput = {
  AND?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
  OR?: Prisma.PackageSubscriptionScalarWhereInput[]
  NOT?: Prisma.PackageSubscriptionScalarWhereInput | Prisma.PackageSubscriptionScalarWhereInput[]
  id?: Prisma.IntFilter<"PackageSubscription"> | number
  tenantId?: Prisma.UuidFilter<"PackageSubscription"> | string
  packageId?: Prisma.IntFilter<"PackageSubscription"> | number
  packageName?: Prisma.EnumpackageNameFilter<"PackageSubscription"> | $Enums.packageName
  packagePrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFilter<"PackageSubscription"> | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFilter<"PackageSubscription"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  endsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  trialEndsAt?: Prisma.DateTimeNullableFilter<"PackageSubscription"> | Date | string | null
  metadata?: Prisma.JsonNullableFilter<"PackageSubscription">
  createdAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PackageSubscription"> | Date | string
}

export type PackageSubscriptionCreateWithoutPackageInput = {
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  tenant: Prisma.TenantCreateNestedOneWithoutSubscriptionInput
}

export type PackageSubscriptionUncheckedCreateWithoutPackageInput = {
  id?: number
  tenantId: string
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionCreateOrConnectWithoutPackageInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput>
}

export type PackageSubscriptionCreateManyPackageInputEnvelope = {
  data: Prisma.PackageSubscriptionCreateManyPackageInput | Prisma.PackageSubscriptionCreateManyPackageInput[]
  skipDuplicates?: boolean
}

export type PackageSubscriptionUpsertWithWhereUniqueWithoutPackageInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  update: Prisma.XOR<Prisma.PackageSubscriptionUpdateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedUpdateWithoutPackageInput>
  create: Prisma.XOR<Prisma.PackageSubscriptionCreateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedCreateWithoutPackageInput>
}

export type PackageSubscriptionUpdateWithWhereUniqueWithoutPackageInput = {
  where: Prisma.PackageSubscriptionWhereUniqueInput
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateWithoutPackageInput, Prisma.PackageSubscriptionUncheckedUpdateWithoutPackageInput>
}

export type PackageSubscriptionUpdateManyWithWhereWithoutPackageInput = {
  where: Prisma.PackageSubscriptionScalarWhereInput
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateManyMutationInput, Prisma.PackageSubscriptionUncheckedUpdateManyWithoutPackageInput>
}

export type PackageSubscriptionCreateManyTenantInput = {
  id?: number
  packageId: number
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionUpdateWithoutTenantInput = {
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  package?: Prisma.PackageUpdateOneRequiredWithoutSubscriptionNestedInput
}

export type PackageSubscriptionUncheckedUpdateWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  packageId?: Prisma.IntFieldUpdateOperationsInput | number
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionUncheckedUpdateManyWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  packageId?: Prisma.IntFieldUpdateOperationsInput | number
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionCreateManyPackageInput = {
  id?: number
  tenantId: string
  packageName?: $Enums.packageName
  packagePrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SubscriptionStatus
  amountPaid?: runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt: Date | string
  endsAt?: Date | string | null
  trialEndsAt?: Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PackageSubscriptionUpdateWithoutPackageInput = {
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tenant?: Prisma.TenantUpdateOneRequiredWithoutSubscriptionNestedInput
}

export type PackageSubscriptionUncheckedUpdateWithoutPackageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PackageSubscriptionUncheckedUpdateManyWithoutPackageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  packageName?: Prisma.EnumpackageNameFieldUpdateOperationsInput | $Enums.packageName
  packagePrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  packageTrialPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  startsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trialEndsAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PackageSubscriptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  packageId?: boolean
  packageName?: boolean
  packagePrice?: boolean
  packageTrialPrice?: boolean
  status?: boolean
  amountPaid?: boolean
  startsAt?: boolean
  endsAt?: boolean
  trialEndsAt?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["packageSubscription"]>

export type PackageSubscriptionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  packageId?: boolean
  packageName?: boolean
  packagePrice?: boolean
  packageTrialPrice?: boolean
  status?: boolean
  amountPaid?: boolean
  startsAt?: boolean
  endsAt?: boolean
  trialEndsAt?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["packageSubscription"]>

export type PackageSubscriptionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  packageId?: boolean
  packageName?: boolean
  packagePrice?: boolean
  packageTrialPrice?: boolean
  status?: boolean
  amountPaid?: boolean
  startsAt?: boolean
  endsAt?: boolean
  trialEndsAt?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["packageSubscription"]>

export type PackageSubscriptionSelectScalar = {
  id?: boolean
  tenantId?: boolean
  packageId?: boolean
  packageName?: boolean
  packagePrice?: boolean
  packageTrialPrice?: boolean
  status?: boolean
  amountPaid?: boolean
  startsAt?: boolean
  endsAt?: boolean
  trialEndsAt?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PackageSubscriptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tenantId" | "packageId" | "packageName" | "packagePrice" | "packageTrialPrice" | "status" | "amountPaid" | "startsAt" | "endsAt" | "trialEndsAt" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["packageSubscription"]>
export type PackageSubscriptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}
export type PackageSubscriptionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}
export type PackageSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  package?: boolean | Prisma.PackageDefaultArgs<ExtArgs>
}

export type $PackageSubscriptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PackageSubscription"
  objects: {
    tenant: Prisma.$TenantPayload<ExtArgs>
    package: Prisma.$PackagePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tenantId: string
    packageId: number
    packageName: $Enums.packageName
    packagePrice: runtime.Decimal
    packageTrialPrice: runtime.Decimal
    status: $Enums.SubscriptionStatus
    amountPaid: runtime.Decimal
    startsAt: Date
    endsAt: Date | null
    trialEndsAt: Date | null
    metadata: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["packageSubscription"]>
  composites: {}
}

export type PackageSubscriptionGetPayload<S extends boolean | null | undefined | PackageSubscriptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload, S>

export type PackageSubscriptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PackageSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PackageSubscriptionCountAggregateInputType | true
  }

export interface PackageSubscriptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageSubscription'], meta: { name: 'PackageSubscription' } }
  /**
   * Find zero or one PackageSubscription that matches the filter.
   * @param {PackageSubscriptionFindUniqueArgs} args - Arguments to find a PackageSubscription
   * @example
   * // Get one PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PackageSubscriptionFindUniqueArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PackageSubscription that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PackageSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a PackageSubscription
   * @example
   * // Get one PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PackageSubscriptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PackageSubscription that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionFindFirstArgs} args - Arguments to find a PackageSubscription
   * @example
   * // Get one PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PackageSubscriptionFindFirstArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PackageSubscription that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionFindFirstOrThrowArgs} args - Arguments to find a PackageSubscription
   * @example
   * // Get one PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PackageSubscriptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PackageSubscriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PackageSubscriptions
   * const packageSubscriptions = await prisma.packageSubscription.findMany()
   * 
   * // Get first 10 PackageSubscriptions
   * const packageSubscriptions = await prisma.packageSubscription.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const packageSubscriptionWithIdOnly = await prisma.packageSubscription.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PackageSubscriptionFindManyArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PackageSubscription.
   * @param {PackageSubscriptionCreateArgs} args - Arguments to create a PackageSubscription.
   * @example
   * // Create one PackageSubscription
   * const PackageSubscription = await prisma.packageSubscription.create({
   *   data: {
   *     // ... data to create a PackageSubscription
   *   }
   * })
   * 
   */
  create<T extends PackageSubscriptionCreateArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionCreateArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PackageSubscriptions.
   * @param {PackageSubscriptionCreateManyArgs} args - Arguments to create many PackageSubscriptions.
   * @example
   * // Create many PackageSubscriptions
   * const packageSubscription = await prisma.packageSubscription.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PackageSubscriptionCreateManyArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PackageSubscriptions and returns the data saved in the database.
   * @param {PackageSubscriptionCreateManyAndReturnArgs} args - Arguments to create many PackageSubscriptions.
   * @example
   * // Create many PackageSubscriptions
   * const packageSubscription = await prisma.packageSubscription.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PackageSubscriptions and only return the `id`
   * const packageSubscriptionWithIdOnly = await prisma.packageSubscription.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PackageSubscriptionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PackageSubscription.
   * @param {PackageSubscriptionDeleteArgs} args - Arguments to delete one PackageSubscription.
   * @example
   * // Delete one PackageSubscription
   * const PackageSubscription = await prisma.packageSubscription.delete({
   *   where: {
   *     // ... filter to delete one PackageSubscription
   *   }
   * })
   * 
   */
  delete<T extends PackageSubscriptionDeleteArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionDeleteArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PackageSubscription.
   * @param {PackageSubscriptionUpdateArgs} args - Arguments to update one PackageSubscription.
   * @example
   * // Update one PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PackageSubscriptionUpdateArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionUpdateArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PackageSubscriptions.
   * @param {PackageSubscriptionDeleteManyArgs} args - Arguments to filter PackageSubscriptions to delete.
   * @example
   * // Delete a few PackageSubscriptions
   * const { count } = await prisma.packageSubscription.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PackageSubscriptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PackageSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PackageSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PackageSubscriptions
   * const packageSubscription = await prisma.packageSubscription.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PackageSubscriptionUpdateManyArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PackageSubscriptions and returns the data updated in the database.
   * @param {PackageSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many PackageSubscriptions.
   * @example
   * // Update many PackageSubscriptions
   * const packageSubscription = await prisma.packageSubscription.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PackageSubscriptions and only return the `id`
   * const packageSubscriptionWithIdOnly = await prisma.packageSubscription.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PackageSubscriptionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PackageSubscription.
   * @param {PackageSubscriptionUpsertArgs} args - Arguments to update or create a PackageSubscription.
   * @example
   * // Update or create a PackageSubscription
   * const packageSubscription = await prisma.packageSubscription.upsert({
   *   create: {
   *     // ... data to create a PackageSubscription
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PackageSubscription we want to update
   *   }
   * })
   */
  upsert<T extends PackageSubscriptionUpsertArgs>(args: Prisma.SelectSubset<T, PackageSubscriptionUpsertArgs<ExtArgs>>): Prisma.Prisma__PackageSubscriptionClient<runtime.Types.Result.GetResult<Prisma.$PackageSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PackageSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionCountArgs} args - Arguments to filter PackageSubscriptions to count.
   * @example
   * // Count the number of PackageSubscriptions
   * const count = await prisma.packageSubscription.count({
   *   where: {
   *     // ... the filter for the PackageSubscriptions we want to count
   *   }
   * })
  **/
  count<T extends PackageSubscriptionCountArgs>(
    args?: Prisma.Subset<T, PackageSubscriptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PackageSubscriptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PackageSubscription.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PackageSubscriptionAggregateArgs>(args: Prisma.Subset<T, PackageSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetPackageSubscriptionAggregateType<T>>

  /**
   * Group by PackageSubscription.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PackageSubscriptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PackageSubscriptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PackageSubscriptionGroupByArgs['orderBy'] }
      : { orderBy?: PackageSubscriptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PackageSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PackageSubscription model
 */
readonly fields: PackageSubscriptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PackageSubscription.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PackageSubscriptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tenant<T extends Prisma.TenantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TenantDefaultArgs<ExtArgs>>): Prisma.Prisma__TenantClient<runtime.Types.Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  package<T extends Prisma.PackageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PackageDefaultArgs<ExtArgs>>): Prisma.Prisma__PackageClient<runtime.Types.Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PackageSubscription model
 */
export interface PackageSubscriptionFieldRefs {
  readonly id: Prisma.FieldRef<"PackageSubscription", 'Int'>
  readonly tenantId: Prisma.FieldRef<"PackageSubscription", 'String'>
  readonly packageId: Prisma.FieldRef<"PackageSubscription", 'Int'>
  readonly packageName: Prisma.FieldRef<"PackageSubscription", 'packageName'>
  readonly packagePrice: Prisma.FieldRef<"PackageSubscription", 'Decimal'>
  readonly packageTrialPrice: Prisma.FieldRef<"PackageSubscription", 'Decimal'>
  readonly status: Prisma.FieldRef<"PackageSubscription", 'SubscriptionStatus'>
  readonly amountPaid: Prisma.FieldRef<"PackageSubscription", 'Decimal'>
  readonly startsAt: Prisma.FieldRef<"PackageSubscription", 'DateTime'>
  readonly endsAt: Prisma.FieldRef<"PackageSubscription", 'DateTime'>
  readonly trialEndsAt: Prisma.FieldRef<"PackageSubscription", 'DateTime'>
  readonly metadata: Prisma.FieldRef<"PackageSubscription", 'Json'>
  readonly createdAt: Prisma.FieldRef<"PackageSubscription", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PackageSubscription", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PackageSubscription findUnique
 */
export type PackageSubscriptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which PackageSubscription to fetch.
   */
  where: Prisma.PackageSubscriptionWhereUniqueInput
}

/**
 * PackageSubscription findUniqueOrThrow
 */
export type PackageSubscriptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which PackageSubscription to fetch.
   */
  where: Prisma.PackageSubscriptionWhereUniqueInput
}

/**
 * PackageSubscription findFirst
 */
export type PackageSubscriptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which PackageSubscription to fetch.
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PackageSubscriptions to fetch.
   */
  orderBy?: Prisma.PackageSubscriptionOrderByWithRelationInput | Prisma.PackageSubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PackageSubscriptions.
   */
  cursor?: Prisma.PackageSubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PackageSubscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PackageSubscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PackageSubscriptions.
   */
  distinct?: Prisma.PackageSubscriptionScalarFieldEnum | Prisma.PackageSubscriptionScalarFieldEnum[]
}

/**
 * PackageSubscription findFirstOrThrow
 */
export type PackageSubscriptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which PackageSubscription to fetch.
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PackageSubscriptions to fetch.
   */
  orderBy?: Prisma.PackageSubscriptionOrderByWithRelationInput | Prisma.PackageSubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PackageSubscriptions.
   */
  cursor?: Prisma.PackageSubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PackageSubscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PackageSubscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PackageSubscriptions.
   */
  distinct?: Prisma.PackageSubscriptionScalarFieldEnum | Prisma.PackageSubscriptionScalarFieldEnum[]
}

/**
 * PackageSubscription findMany
 */
export type PackageSubscriptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which PackageSubscriptions to fetch.
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PackageSubscriptions to fetch.
   */
  orderBy?: Prisma.PackageSubscriptionOrderByWithRelationInput | Prisma.PackageSubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PackageSubscriptions.
   */
  cursor?: Prisma.PackageSubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PackageSubscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PackageSubscriptions.
   */
  skip?: number
  distinct?: Prisma.PackageSubscriptionScalarFieldEnum | Prisma.PackageSubscriptionScalarFieldEnum[]
}

/**
 * PackageSubscription create
 */
export type PackageSubscriptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * The data needed to create a PackageSubscription.
   */
  data: Prisma.XOR<Prisma.PackageSubscriptionCreateInput, Prisma.PackageSubscriptionUncheckedCreateInput>
}

/**
 * PackageSubscription createMany
 */
export type PackageSubscriptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PackageSubscriptions.
   */
  data: Prisma.PackageSubscriptionCreateManyInput | Prisma.PackageSubscriptionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PackageSubscription createManyAndReturn
 */
export type PackageSubscriptionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * The data used to create many PackageSubscriptions.
   */
  data: Prisma.PackageSubscriptionCreateManyInput | Prisma.PackageSubscriptionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PackageSubscription update
 */
export type PackageSubscriptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * The data needed to update a PackageSubscription.
   */
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateInput, Prisma.PackageSubscriptionUncheckedUpdateInput>
  /**
   * Choose, which PackageSubscription to update.
   */
  where: Prisma.PackageSubscriptionWhereUniqueInput
}

/**
 * PackageSubscription updateMany
 */
export type PackageSubscriptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PackageSubscriptions.
   */
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateManyMutationInput, Prisma.PackageSubscriptionUncheckedUpdateManyInput>
  /**
   * Filter which PackageSubscriptions to update
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * Limit how many PackageSubscriptions to update.
   */
  limit?: number
}

/**
 * PackageSubscription updateManyAndReturn
 */
export type PackageSubscriptionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * The data used to update PackageSubscriptions.
   */
  data: Prisma.XOR<Prisma.PackageSubscriptionUpdateManyMutationInput, Prisma.PackageSubscriptionUncheckedUpdateManyInput>
  /**
   * Filter which PackageSubscriptions to update
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * Limit how many PackageSubscriptions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PackageSubscription upsert
 */
export type PackageSubscriptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * The filter to search for the PackageSubscription to update in case it exists.
   */
  where: Prisma.PackageSubscriptionWhereUniqueInput
  /**
   * In case the PackageSubscription found by the `where` argument doesn't exist, create a new PackageSubscription with this data.
   */
  create: Prisma.XOR<Prisma.PackageSubscriptionCreateInput, Prisma.PackageSubscriptionUncheckedCreateInput>
  /**
   * In case the PackageSubscription was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PackageSubscriptionUpdateInput, Prisma.PackageSubscriptionUncheckedUpdateInput>
}

/**
 * PackageSubscription delete
 */
export type PackageSubscriptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
  /**
   * Filter which PackageSubscription to delete.
   */
  where: Prisma.PackageSubscriptionWhereUniqueInput
}

/**
 * PackageSubscription deleteMany
 */
export type PackageSubscriptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PackageSubscriptions to delete
   */
  where?: Prisma.PackageSubscriptionWhereInput
  /**
   * Limit how many PackageSubscriptions to delete.
   */
  limit?: number
}

/**
 * PackageSubscription without action
 */
export type PackageSubscriptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PackageSubscription
   */
  select?: Prisma.PackageSubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PackageSubscription
   */
  omit?: Prisma.PackageSubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PackageSubscriptionInclude<ExtArgs> | null
}
