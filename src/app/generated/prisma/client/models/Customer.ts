
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Customer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Customer
 * CUSTOMERS
 */
export type CustomerModel = runtime.Types.Result.DefaultSelection<Prisma.$CustomerPayload>

export type AggregateCustomer = {
  _count: CustomerCountAggregateOutputType | null
  _avg: CustomerAvgAggregateOutputType | null
  _sum: CustomerSumAggregateOutputType | null
  _min: CustomerMinAggregateOutputType | null
  _max: CustomerMaxAggregateOutputType | null
}

export type CustomerAvgAggregateOutputType = {
  id: number | null
}

export type CustomerSumAggregateOutputType = {
  id: number | null
}

export type CustomerMinAggregateOutputType = {
  id: number | null
  tenantId: string | null
  name: string | null
  email: string | null
  phone: string | null
  address: string | null
  syncStatus: $Enums.SyncStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CustomerMaxAggregateOutputType = {
  id: number | null
  tenantId: string | null
  name: string | null
  email: string | null
  phone: string | null
  address: string | null
  syncStatus: $Enums.SyncStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CustomerCountAggregateOutputType = {
  id: number
  tenantId: number
  name: number
  email: number
  phone: number
  address: number
  syncStatus: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CustomerAvgAggregateInputType = {
  id?: true
}

export type CustomerSumAggregateInputType = {
  id?: true
}

export type CustomerMinAggregateInputType = {
  id?: true
  tenantId?: true
  name?: true
  email?: true
  phone?: true
  address?: true
  syncStatus?: true
  createdAt?: true
  updatedAt?: true
}

export type CustomerMaxAggregateInputType = {
  id?: true
  tenantId?: true
  name?: true
  email?: true
  phone?: true
  address?: true
  syncStatus?: true
  createdAt?: true
  updatedAt?: true
}

export type CustomerCountAggregateInputType = {
  id?: true
  tenantId?: true
  name?: true
  email?: true
  phone?: true
  address?: true
  syncStatus?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CustomerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Customer to aggregate.
   */
  where?: Prisma.CustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Customers to fetch.
   */
  orderBy?: Prisma.CustomerOrderByWithRelationInput | Prisma.CustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Customers
  **/
  _count?: true | CustomerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CustomerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CustomerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomerMaxAggregateInputType
}

export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomer[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomer[P]>
}




export type CustomerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CustomerWhereInput
  orderBy?: Prisma.CustomerOrderByWithAggregationInput | Prisma.CustomerOrderByWithAggregationInput[]
  by: Prisma.CustomerScalarFieldEnum[] | Prisma.CustomerScalarFieldEnum
  having?: Prisma.CustomerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomerCountAggregateInputType | true
  _avg?: CustomerAvgAggregateInputType
  _sum?: CustomerSumAggregateInputType
  _min?: CustomerMinAggregateInputType
  _max?: CustomerMaxAggregateInputType
}

export type CustomerGroupByOutputType = {
  id: number
  tenantId: string
  name: string
  email: string | null
  phone: string | null
  address: string | null
  syncStatus: $Enums.SyncStatus
  createdAt: Date
  updatedAt: Date | null
  _count: CustomerCountAggregateOutputType | null
  _avg: CustomerAvgAggregateOutputType | null
  _sum: CustomerSumAggregateOutputType | null
  _min: CustomerMinAggregateOutputType | null
  _max: CustomerMaxAggregateOutputType | null
}

type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomerGroupByOutputType[P]>
      }
    >
  >



export type CustomerWhereInput = {
  AND?: Prisma.CustomerWhereInput | Prisma.CustomerWhereInput[]
  OR?: Prisma.CustomerWhereInput[]
  NOT?: Prisma.CustomerWhereInput | Prisma.CustomerWhereInput[]
  id?: Prisma.IntFilter<"Customer"> | number
  tenantId?: Prisma.StringFilter<"Customer"> | string
  name?: Prisma.StringFilter<"Customer"> | string
  email?: Prisma.StringNullableFilter<"Customer"> | string | null
  phone?: Prisma.StringNullableFilter<"Customer"> | string | null
  address?: Prisma.StringNullableFilter<"Customer"> | string | null
  syncStatus?: Prisma.EnumSyncStatusFilter<"Customer"> | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFilter<"Customer"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Customer"> | Date | string | null
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  invoices?: Prisma.InvoiceListRelationFilter
}

export type CustomerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  syncStatus?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  tenant?: Prisma.TenantOrderByWithRelationInput
  invoices?: Prisma.InvoiceOrderByRelationAggregateInput
}

export type CustomerWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CustomerWhereInput | Prisma.CustomerWhereInput[]
  OR?: Prisma.CustomerWhereInput[]
  NOT?: Prisma.CustomerWhereInput | Prisma.CustomerWhereInput[]
  tenantId?: Prisma.StringFilter<"Customer"> | string
  name?: Prisma.StringFilter<"Customer"> | string
  email?: Prisma.StringNullableFilter<"Customer"> | string | null
  phone?: Prisma.StringNullableFilter<"Customer"> | string | null
  address?: Prisma.StringNullableFilter<"Customer"> | string | null
  syncStatus?: Prisma.EnumSyncStatusFilter<"Customer"> | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFilter<"Customer"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Customer"> | Date | string | null
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  invoices?: Prisma.InvoiceListRelationFilter
}, "id">

export type CustomerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  syncStatus?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CustomerCountOrderByAggregateInput
  _avg?: Prisma.CustomerAvgOrderByAggregateInput
  _max?: Prisma.CustomerMaxOrderByAggregateInput
  _min?: Prisma.CustomerMinOrderByAggregateInput
  _sum?: Prisma.CustomerSumOrderByAggregateInput
}

export type CustomerScalarWhereWithAggregatesInput = {
  AND?: Prisma.CustomerScalarWhereWithAggregatesInput | Prisma.CustomerScalarWhereWithAggregatesInput[]
  OR?: Prisma.CustomerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CustomerScalarWhereWithAggregatesInput | Prisma.CustomerScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Customer"> | number
  tenantId?: Prisma.StringWithAggregatesFilter<"Customer"> | string
  name?: Prisma.StringWithAggregatesFilter<"Customer"> | string
  email?: Prisma.StringNullableWithAggregatesFilter<"Customer"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"Customer"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"Customer"> | string | null
  syncStatus?: Prisma.EnumSyncStatusWithAggregatesFilter<"Customer"> | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Customer"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
}

export type CustomerCreateInput = {
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
  tenant: Prisma.TenantCreateNestedOneWithoutCustomersInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutCustomerInput
}

export type CustomerUncheckedCreateInput = {
  id?: number
  tenantId: string
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutCustomerInput
}

export type CustomerUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tenant?: Prisma.TenantUpdateOneRequiredWithoutCustomersNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutCustomerNestedInput
}

export type CustomerUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
}

export type CustomerCreateManyInput = {
  id?: number
  tenantId: string
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type CustomerUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CustomerUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CustomerListRelationFilter = {
  every?: Prisma.CustomerWhereInput
  some?: Prisma.CustomerWhereInput
  none?: Prisma.CustomerWhereInput
}

export type CustomerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CustomerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  syncStatus?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CustomerAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CustomerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  syncStatus?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CustomerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  syncStatus?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CustomerSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CustomerScalarRelationFilter = {
  is?: Prisma.CustomerWhereInput
  isNot?: Prisma.CustomerWhereInput
}

export type CustomerCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput> | Prisma.CustomerCreateWithoutTenantInput[] | Prisma.CustomerUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutTenantInput | Prisma.CustomerCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.CustomerCreateManyTenantInputEnvelope
  connect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
}

export type CustomerUncheckedCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput> | Prisma.CustomerCreateWithoutTenantInput[] | Prisma.CustomerUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutTenantInput | Prisma.CustomerCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.CustomerCreateManyTenantInputEnvelope
  connect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
}

export type CustomerUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput> | Prisma.CustomerCreateWithoutTenantInput[] | Prisma.CustomerUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutTenantInput | Prisma.CustomerCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.CustomerUpsertWithWhereUniqueWithoutTenantInput | Prisma.CustomerUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.CustomerCreateManyTenantInputEnvelope
  set?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  disconnect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  delete?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  connect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  update?: Prisma.CustomerUpdateWithWhereUniqueWithoutTenantInput | Prisma.CustomerUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.CustomerUpdateManyWithWhereWithoutTenantInput | Prisma.CustomerUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.CustomerScalarWhereInput | Prisma.CustomerScalarWhereInput[]
}

export type CustomerUncheckedUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput> | Prisma.CustomerCreateWithoutTenantInput[] | Prisma.CustomerUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutTenantInput | Prisma.CustomerCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.CustomerUpsertWithWhereUniqueWithoutTenantInput | Prisma.CustomerUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.CustomerCreateManyTenantInputEnvelope
  set?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  disconnect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  delete?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  connect?: Prisma.CustomerWhereUniqueInput | Prisma.CustomerWhereUniqueInput[]
  update?: Prisma.CustomerUpdateWithWhereUniqueWithoutTenantInput | Prisma.CustomerUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.CustomerUpdateManyWithWhereWithoutTenantInput | Prisma.CustomerUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.CustomerScalarWhereInput | Prisma.CustomerScalarWhereInput[]
}

export type CustomerCreateNestedOneWithoutInvoicesInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutInvoicesInput, Prisma.CustomerUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutInvoicesInput
  connect?: Prisma.CustomerWhereUniqueInput
}

export type CustomerUpdateOneRequiredWithoutInvoicesNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerCreateWithoutInvoicesInput, Prisma.CustomerUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.CustomerCreateOrConnectWithoutInvoicesInput
  upsert?: Prisma.CustomerUpsertWithoutInvoicesInput
  connect?: Prisma.CustomerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CustomerUpdateToOneWithWhereWithoutInvoicesInput, Prisma.CustomerUpdateWithoutInvoicesInput>, Prisma.CustomerUncheckedUpdateWithoutInvoicesInput>
}

export type CustomerCreateWithoutTenantInput = {
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
  invoices?: Prisma.InvoiceCreateNestedManyWithoutCustomerInput
}

export type CustomerUncheckedCreateWithoutTenantInput = {
  id?: number
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutCustomerInput
}

export type CustomerCreateOrConnectWithoutTenantInput = {
  where: Prisma.CustomerWhereUniqueInput
  create: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput>
}

export type CustomerCreateManyTenantInputEnvelope = {
  data: Prisma.CustomerCreateManyTenantInput | Prisma.CustomerCreateManyTenantInput[]
  skipDuplicates?: boolean
}

export type CustomerUpsertWithWhereUniqueWithoutTenantInput = {
  where: Prisma.CustomerWhereUniqueInput
  update: Prisma.XOR<Prisma.CustomerUpdateWithoutTenantInput, Prisma.CustomerUncheckedUpdateWithoutTenantInput>
  create: Prisma.XOR<Prisma.CustomerCreateWithoutTenantInput, Prisma.CustomerUncheckedCreateWithoutTenantInput>
}

export type CustomerUpdateWithWhereUniqueWithoutTenantInput = {
  where: Prisma.CustomerWhereUniqueInput
  data: Prisma.XOR<Prisma.CustomerUpdateWithoutTenantInput, Prisma.CustomerUncheckedUpdateWithoutTenantInput>
}

export type CustomerUpdateManyWithWhereWithoutTenantInput = {
  where: Prisma.CustomerScalarWhereInput
  data: Prisma.XOR<Prisma.CustomerUpdateManyMutationInput, Prisma.CustomerUncheckedUpdateManyWithoutTenantInput>
}

export type CustomerScalarWhereInput = {
  AND?: Prisma.CustomerScalarWhereInput | Prisma.CustomerScalarWhereInput[]
  OR?: Prisma.CustomerScalarWhereInput[]
  NOT?: Prisma.CustomerScalarWhereInput | Prisma.CustomerScalarWhereInput[]
  id?: Prisma.IntFilter<"Customer"> | number
  tenantId?: Prisma.StringFilter<"Customer"> | string
  name?: Prisma.StringFilter<"Customer"> | string
  email?: Prisma.StringNullableFilter<"Customer"> | string | null
  phone?: Prisma.StringNullableFilter<"Customer"> | string | null
  address?: Prisma.StringNullableFilter<"Customer"> | string | null
  syncStatus?: Prisma.EnumSyncStatusFilter<"Customer"> | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFilter<"Customer"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Customer"> | Date | string | null
}

export type CustomerCreateWithoutInvoicesInput = {
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
  tenant: Prisma.TenantCreateNestedOneWithoutCustomersInput
}

export type CustomerUncheckedCreateWithoutInvoicesInput = {
  id?: number
  tenantId: string
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type CustomerCreateOrConnectWithoutInvoicesInput = {
  where: Prisma.CustomerWhereUniqueInput
  create: Prisma.XOR<Prisma.CustomerCreateWithoutInvoicesInput, Prisma.CustomerUncheckedCreateWithoutInvoicesInput>
}

export type CustomerUpsertWithoutInvoicesInput = {
  update: Prisma.XOR<Prisma.CustomerUpdateWithoutInvoicesInput, Prisma.CustomerUncheckedUpdateWithoutInvoicesInput>
  create: Prisma.XOR<Prisma.CustomerCreateWithoutInvoicesInput, Prisma.CustomerUncheckedCreateWithoutInvoicesInput>
  where?: Prisma.CustomerWhereInput
}

export type CustomerUpdateToOneWithWhereWithoutInvoicesInput = {
  where?: Prisma.CustomerWhereInput
  data: Prisma.XOR<Prisma.CustomerUpdateWithoutInvoicesInput, Prisma.CustomerUncheckedUpdateWithoutInvoicesInput>
}

export type CustomerUpdateWithoutInvoicesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tenant?: Prisma.TenantUpdateOneRequiredWithoutCustomersNestedInput
}

export type CustomerUncheckedUpdateWithoutInvoicesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CustomerCreateManyTenantInput = {
  id?: number
  name: string
  email?: string | null
  phone?: string | null
  address?: string | null
  syncStatus?: $Enums.SyncStatus
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type CustomerUpdateWithoutTenantInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  invoices?: Prisma.InvoiceUpdateManyWithoutCustomerNestedInput
}

export type CustomerUncheckedUpdateWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
}

export type CustomerUncheckedUpdateManyWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  syncStatus?: Prisma.EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CustomerCountOutputType
 */

export type CustomerCountOutputType = {
  invoices: number
}

export type CustomerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  invoices?: boolean | CustomerCountOutputTypeCountInvoicesArgs
}

/**
 * CustomerCountOutputType without action
 */
export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerCountOutputType
   */
  select?: Prisma.CustomerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CustomerCountOutputType without action
 */
export type CustomerCountOutputTypeCountInvoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvoiceWhereInput
}


export type CustomerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  syncStatus?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  invoices?: boolean | Prisma.Customer$invoicesArgs<ExtArgs>
  _count?: boolean | Prisma.CustomerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type CustomerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  syncStatus?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type CustomerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  syncStatus?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type CustomerSelectScalar = {
  id?: boolean
  tenantId?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  syncStatus?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CustomerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tenantId" | "name" | "email" | "phone" | "address" | "syncStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
export type CustomerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  invoices?: boolean | Prisma.Customer$invoicesArgs<ExtArgs>
  _count?: boolean | Prisma.CustomerCountOutputTypeDefaultArgs<ExtArgs>
}
export type CustomerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}
export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
}

export type $CustomerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Customer"
  objects: {
    tenant: Prisma.$TenantPayload<ExtArgs>
    invoices: Prisma.$InvoicePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tenantId: string
    name: string
    email: string | null
    phone: string | null
    address: string | null
    syncStatus: $Enums.SyncStatus
    createdAt: Date
    updatedAt: Date | null
  }, ExtArgs["result"]["customer"]>
  composites: {}
}

export type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CustomerPayload, S>

export type CustomerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomerCountAggregateInputType | true
  }

export interface CustomerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
  /**
   * Find zero or one Customer that matches the filter.
   * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerFindUniqueArgs>(args: Prisma.SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerFindFirstArgs>(args?: Prisma.SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Customers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Customers
   * const customers = await prisma.customer.findMany()
   * 
   * // Get first 10 Customers
   * const customers = await prisma.customer.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CustomerFindManyArgs>(args?: Prisma.SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Customer.
   * @param {CustomerCreateArgs} args - Arguments to create a Customer.
   * @example
   * // Create one Customer
   * const Customer = await prisma.customer.create({
   *   data: {
   *     // ... data to create a Customer
   *   }
   * })
   * 
   */
  create<T extends CustomerCreateArgs>(args: Prisma.SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Customers.
   * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customer = await prisma.customer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CustomerCreateManyArgs>(args?: Prisma.SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Customers and returns the data saved in the database.
   * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customer = await prisma.customer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Customers and only return the `id`
   * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Customer.
   * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
   * @example
   * // Delete one Customer
   * const Customer = await prisma.customer.delete({
   *   where: {
   *     // ... filter to delete one Customer
   *   }
   * })
   * 
   */
  delete<T extends CustomerDeleteArgs>(args: Prisma.SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Customer.
   * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
   * @example
   * // Update one Customer
   * const customer = await prisma.customer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CustomerUpdateArgs>(args: Prisma.SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Customers.
   * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
   * @example
   * // Delete a few Customers
   * const { count } = await prisma.customer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CustomerDeleteManyArgs>(args?: Prisma.SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Customers
   * const customer = await prisma.customer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CustomerUpdateManyArgs>(args: Prisma.SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers and returns the data updated in the database.
   * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
   * @example
   * // Update many Customers
   * const customer = await prisma.customer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Customers and only return the `id`
   * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Customer.
   * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
   * @example
   * // Update or create a Customer
   * const customer = await prisma.customer.upsert({
   *   create: {
   *     // ... data to create a Customer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Customer we want to update
   *   }
   * })
   */
  upsert<T extends CustomerUpsertArgs>(args: Prisma.SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
   * @example
   * // Count the number of Customers
   * const count = await prisma.customer.count({
   *   where: {
   *     // ... the filter for the Customers we want to count
   *   }
   * })
  **/
  count<T extends CustomerCountArgs>(
    args?: Prisma.Subset<T, CustomerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Customer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomerAggregateArgs>(args: Prisma.Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

  /**
   * Group by Customer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CustomerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerGroupByArgs['orderBy'] }
      : { orderBy?: CustomerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Customer model
 */
readonly fields: CustomerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Customer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tenant<T extends Prisma.TenantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TenantDefaultArgs<ExtArgs>>): Prisma.Prisma__TenantClient<runtime.Types.Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  invoices<T extends Prisma.Customer$invoicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Customer$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Customer model
 */
export interface CustomerFieldRefs {
  readonly id: Prisma.FieldRef<"Customer", 'Int'>
  readonly tenantId: Prisma.FieldRef<"Customer", 'String'>
  readonly name: Prisma.FieldRef<"Customer", 'String'>
  readonly email: Prisma.FieldRef<"Customer", 'String'>
  readonly phone: Prisma.FieldRef<"Customer", 'String'>
  readonly address: Prisma.FieldRef<"Customer", 'String'>
  readonly syncStatus: Prisma.FieldRef<"Customer", 'SyncStatus'>
  readonly createdAt: Prisma.FieldRef<"Customer", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Customer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Customer findUnique
 */
export type CustomerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter, which Customer to fetch.
   */
  where: Prisma.CustomerWhereUniqueInput
}

/**
 * Customer findUniqueOrThrow
 */
export type CustomerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter, which Customer to fetch.
   */
  where: Prisma.CustomerWhereUniqueInput
}

/**
 * Customer findFirst
 */
export type CustomerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter, which Customer to fetch.
   */
  where?: Prisma.CustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Customers to fetch.
   */
  orderBy?: Prisma.CustomerOrderByWithRelationInput | Prisma.CustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Customers.
   */
  cursor?: Prisma.CustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Customers.
   */
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * Customer findFirstOrThrow
 */
export type CustomerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter, which Customer to fetch.
   */
  where?: Prisma.CustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Customers to fetch.
   */
  orderBy?: Prisma.CustomerOrderByWithRelationInput | Prisma.CustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Customers.
   */
  cursor?: Prisma.CustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Customers.
   */
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * Customer findMany
 */
export type CustomerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter, which Customers to fetch.
   */
  where?: Prisma.CustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Customers to fetch.
   */
  orderBy?: Prisma.CustomerOrderByWithRelationInput | Prisma.CustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Customers.
   */
  cursor?: Prisma.CustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Customers.
   */
  skip?: number
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * Customer create
 */
export type CustomerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * The data needed to create a Customer.
   */
  data: Prisma.XOR<Prisma.CustomerCreateInput, Prisma.CustomerUncheckedCreateInput>
}

/**
 * Customer createMany
 */
export type CustomerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Customers.
   */
  data: Prisma.CustomerCreateManyInput | Prisma.CustomerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Customer createManyAndReturn
 */
export type CustomerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * The data used to create many Customers.
   */
  data: Prisma.CustomerCreateManyInput | Prisma.CustomerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Customer update
 */
export type CustomerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * The data needed to update a Customer.
   */
  data: Prisma.XOR<Prisma.CustomerUpdateInput, Prisma.CustomerUncheckedUpdateInput>
  /**
   * Choose, which Customer to update.
   */
  where: Prisma.CustomerWhereUniqueInput
}

/**
 * Customer updateMany
 */
export type CustomerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Customers.
   */
  data: Prisma.XOR<Prisma.CustomerUpdateManyMutationInput, Prisma.CustomerUncheckedUpdateManyInput>
  /**
   * Filter which Customers to update
   */
  where?: Prisma.CustomerWhereInput
  /**
   * Limit how many Customers to update.
   */
  limit?: number
}

/**
 * Customer updateManyAndReturn
 */
export type CustomerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * The data used to update Customers.
   */
  data: Prisma.XOR<Prisma.CustomerUpdateManyMutationInput, Prisma.CustomerUncheckedUpdateManyInput>
  /**
   * Filter which Customers to update
   */
  where?: Prisma.CustomerWhereInput
  /**
   * Limit how many Customers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Customer upsert
 */
export type CustomerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * The filter to search for the Customer to update in case it exists.
   */
  where: Prisma.CustomerWhereUniqueInput
  /**
   * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
   */
  create: Prisma.XOR<Prisma.CustomerCreateInput, Prisma.CustomerUncheckedCreateInput>
  /**
   * In case the Customer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CustomerUpdateInput, Prisma.CustomerUncheckedUpdateInput>
}

/**
 * Customer delete
 */
export type CustomerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
  /**
   * Filter which Customer to delete.
   */
  where: Prisma.CustomerWhereUniqueInput
}

/**
 * Customer deleteMany
 */
export type CustomerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Customers to delete
   */
  where?: Prisma.CustomerWhereInput
  /**
   * Limit how many Customers to delete.
   */
  limit?: number
}

/**
 * Customer.invoices
 */
export type Customer$invoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  where?: Prisma.InvoiceWhereInput
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  cursor?: Prisma.InvoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
}

/**
 * Customer without action
 */
export type CustomerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Customer
   */
  select?: Prisma.CustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Customer
   */
  omit?: Prisma.CustomerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerInclude<ExtArgs> | null
}
