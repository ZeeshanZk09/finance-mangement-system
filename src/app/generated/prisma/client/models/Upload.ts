
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Upload` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Upload
 * 
 */
export type UploadModel = runtime.Types.Result.DefaultSelection<Prisma.$UploadPayload>

export type AggregateUpload = {
  _count: UploadCountAggregateOutputType | null
  _avg: UploadAvgAggregateOutputType | null
  _sum: UploadSumAggregateOutputType | null
  _min: UploadMinAggregateOutputType | null
  _max: UploadMaxAggregateOutputType | null
}

export type UploadAvgAggregateOutputType = {
  id: number | null
  size: number | null
  attempts: number | null
  maxAttempts: number | null
}

export type UploadSumAggregateOutputType = {
  id: number | null
  size: number | null
  attempts: number | null
  maxAttempts: number | null
}

export type UploadMinAggregateOutputType = {
  id: number | null
  tenantId: string | null
  userId: string | null
  purpose: string | null
  originalName: string | null
  filename: string | null
  localPath: string | null
  mimeType: string | null
  size: number | null
  status: $Enums.UploadStatus | null
  attempts: number | null
  maxAttempts: number | null
  publicId: string | null
  url: string | null
  errorMessage: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UploadMaxAggregateOutputType = {
  id: number | null
  tenantId: string | null
  userId: string | null
  purpose: string | null
  originalName: string | null
  filename: string | null
  localPath: string | null
  mimeType: string | null
  size: number | null
  status: $Enums.UploadStatus | null
  attempts: number | null
  maxAttempts: number | null
  publicId: string | null
  url: string | null
  errorMessage: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UploadCountAggregateOutputType = {
  id: number
  tenantId: number
  userId: number
  purpose: number
  originalName: number
  filename: number
  localPath: number
  mimeType: number
  size: number
  status: number
  attempts: number
  maxAttempts: number
  publicId: number
  url: number
  errorMessage: number
  createdAt: number
  updatedAt: number
  meta: number
  _all: number
}


export type UploadAvgAggregateInputType = {
  id?: true
  size?: true
  attempts?: true
  maxAttempts?: true
}

export type UploadSumAggregateInputType = {
  id?: true
  size?: true
  attempts?: true
  maxAttempts?: true
}

export type UploadMinAggregateInputType = {
  id?: true
  tenantId?: true
  userId?: true
  purpose?: true
  originalName?: true
  filename?: true
  localPath?: true
  mimeType?: true
  size?: true
  status?: true
  attempts?: true
  maxAttempts?: true
  publicId?: true
  url?: true
  errorMessage?: true
  createdAt?: true
  updatedAt?: true
}

export type UploadMaxAggregateInputType = {
  id?: true
  tenantId?: true
  userId?: true
  purpose?: true
  originalName?: true
  filename?: true
  localPath?: true
  mimeType?: true
  size?: true
  status?: true
  attempts?: true
  maxAttempts?: true
  publicId?: true
  url?: true
  errorMessage?: true
  createdAt?: true
  updatedAt?: true
}

export type UploadCountAggregateInputType = {
  id?: true
  tenantId?: true
  userId?: true
  purpose?: true
  originalName?: true
  filename?: true
  localPath?: true
  mimeType?: true
  size?: true
  status?: true
  attempts?: true
  maxAttempts?: true
  publicId?: true
  url?: true
  errorMessage?: true
  createdAt?: true
  updatedAt?: true
  meta?: true
  _all?: true
}

export type UploadAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Upload to aggregate.
   */
  where?: Prisma.UploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Uploads to fetch.
   */
  orderBy?: Prisma.UploadOrderByWithRelationInput | Prisma.UploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Uploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Uploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Uploads
  **/
  _count?: true | UploadCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UploadAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UploadSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UploadMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UploadMaxAggregateInputType
}

export type GetUploadAggregateType<T extends UploadAggregateArgs> = {
      [P in keyof T & keyof AggregateUpload]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUpload[P]>
    : Prisma.GetScalarType<T[P], AggregateUpload[P]>
}




export type UploadGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UploadWhereInput
  orderBy?: Prisma.UploadOrderByWithAggregationInput | Prisma.UploadOrderByWithAggregationInput[]
  by: Prisma.UploadScalarFieldEnum[] | Prisma.UploadScalarFieldEnum
  having?: Prisma.UploadScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UploadCountAggregateInputType | true
  _avg?: UploadAvgAggregateInputType
  _sum?: UploadSumAggregateInputType
  _min?: UploadMinAggregateInputType
  _max?: UploadMaxAggregateInputType
}

export type UploadGroupByOutputType = {
  id: number
  tenantId: string
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts: number
  maxAttempts: number
  publicId: string | null
  url: string | null
  errorMessage: string | null
  createdAt: Date
  updatedAt: Date | null
  meta: runtime.JsonValue | null
  _count: UploadCountAggregateOutputType | null
  _avg: UploadAvgAggregateOutputType | null
  _sum: UploadSumAggregateOutputType | null
  _min: UploadMinAggregateOutputType | null
  _max: UploadMaxAggregateOutputType | null
}

type GetUploadGroupByPayload<T extends UploadGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UploadGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UploadGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UploadGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UploadGroupByOutputType[P]>
      }
    >
  >



export type UploadWhereInput = {
  AND?: Prisma.UploadWhereInput | Prisma.UploadWhereInput[]
  OR?: Prisma.UploadWhereInput[]
  NOT?: Prisma.UploadWhereInput | Prisma.UploadWhereInput[]
  id?: Prisma.IntFilter<"Upload"> | number
  tenantId?: Prisma.UuidFilter<"Upload"> | string
  userId?: Prisma.UuidFilter<"Upload"> | string
  purpose?: Prisma.StringFilter<"Upload"> | string
  originalName?: Prisma.StringFilter<"Upload"> | string
  filename?: Prisma.StringFilter<"Upload"> | string
  localPath?: Prisma.StringNullableFilter<"Upload"> | string | null
  mimeType?: Prisma.StringFilter<"Upload"> | string
  size?: Prisma.IntFilter<"Upload"> | number
  status?: Prisma.EnumUploadStatusFilter<"Upload"> | $Enums.UploadStatus
  attempts?: Prisma.IntFilter<"Upload"> | number
  maxAttempts?: Prisma.IntFilter<"Upload"> | number
  publicId?: Prisma.StringNullableFilter<"Upload"> | string | null
  url?: Prisma.StringNullableFilter<"Upload"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"Upload"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Upload"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Upload"> | Date | string | null
  meta?: Prisma.JsonNullableFilter<"Upload">
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  uploadAudit?: Prisma.UploadAuditListRelationFilter
}

export type UploadOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  localPath?: Prisma.SortOrderInput | Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  status?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
  publicId?: Prisma.SortOrderInput | Prisma.SortOrder
  url?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  tenant?: Prisma.TenantOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  uploadAudit?: Prisma.UploadAuditOrderByRelationAggregateInput
}

export type UploadWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.UploadWhereInput | Prisma.UploadWhereInput[]
  OR?: Prisma.UploadWhereInput[]
  NOT?: Prisma.UploadWhereInput | Prisma.UploadWhereInput[]
  tenantId?: Prisma.UuidFilter<"Upload"> | string
  userId?: Prisma.UuidFilter<"Upload"> | string
  purpose?: Prisma.StringFilter<"Upload"> | string
  originalName?: Prisma.StringFilter<"Upload"> | string
  filename?: Prisma.StringFilter<"Upload"> | string
  localPath?: Prisma.StringNullableFilter<"Upload"> | string | null
  mimeType?: Prisma.StringFilter<"Upload"> | string
  size?: Prisma.IntFilter<"Upload"> | number
  status?: Prisma.EnumUploadStatusFilter<"Upload"> | $Enums.UploadStatus
  attempts?: Prisma.IntFilter<"Upload"> | number
  maxAttempts?: Prisma.IntFilter<"Upload"> | number
  publicId?: Prisma.StringNullableFilter<"Upload"> | string | null
  url?: Prisma.StringNullableFilter<"Upload"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"Upload"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Upload"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Upload"> | Date | string | null
  meta?: Prisma.JsonNullableFilter<"Upload">
  tenant?: Prisma.XOR<Prisma.TenantScalarRelationFilter, Prisma.TenantWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  uploadAudit?: Prisma.UploadAuditListRelationFilter
}, "id">

export type UploadOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  localPath?: Prisma.SortOrderInput | Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  status?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
  publicId?: Prisma.SortOrderInput | Prisma.SortOrder
  url?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.UploadCountOrderByAggregateInput
  _avg?: Prisma.UploadAvgOrderByAggregateInput
  _max?: Prisma.UploadMaxOrderByAggregateInput
  _min?: Prisma.UploadMinOrderByAggregateInput
  _sum?: Prisma.UploadSumOrderByAggregateInput
}

export type UploadScalarWhereWithAggregatesInput = {
  AND?: Prisma.UploadScalarWhereWithAggregatesInput | Prisma.UploadScalarWhereWithAggregatesInput[]
  OR?: Prisma.UploadScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UploadScalarWhereWithAggregatesInput | Prisma.UploadScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Upload"> | number
  tenantId?: Prisma.UuidWithAggregatesFilter<"Upload"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"Upload"> | string
  purpose?: Prisma.StringWithAggregatesFilter<"Upload"> | string
  originalName?: Prisma.StringWithAggregatesFilter<"Upload"> | string
  filename?: Prisma.StringWithAggregatesFilter<"Upload"> | string
  localPath?: Prisma.StringNullableWithAggregatesFilter<"Upload"> | string | null
  mimeType?: Prisma.StringWithAggregatesFilter<"Upload"> | string
  size?: Prisma.IntWithAggregatesFilter<"Upload"> | number
  status?: Prisma.EnumUploadStatusWithAggregatesFilter<"Upload"> | $Enums.UploadStatus
  attempts?: Prisma.IntWithAggregatesFilter<"Upload"> | number
  maxAttempts?: Prisma.IntWithAggregatesFilter<"Upload"> | number
  publicId?: Prisma.StringNullableWithAggregatesFilter<"Upload"> | string | null
  url?: Prisma.StringNullableWithAggregatesFilter<"Upload"> | string | null
  errorMessage?: Prisma.StringNullableWithAggregatesFilter<"Upload"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Upload"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Upload"> | Date | string | null
  meta?: Prisma.JsonNullableWithAggregatesFilter<"Upload">
}

export type UploadCreateInput = {
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant: Prisma.TenantCreateNestedOneWithoutFilesInput
  user: Prisma.UserCreateNestedOneWithoutFilesInput
  uploadAudit?: Prisma.UploadAuditCreateNestedManyWithoutUploadInput
}

export type UploadUncheckedCreateInput = {
  id?: number
  tenantId: string
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedCreateNestedManyWithoutUploadInput
}

export type UploadUpdateInput = {
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant?: Prisma.TenantUpdateOneRequiredWithoutFilesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutFilesNestedInput
  uploadAudit?: Prisma.UploadAuditUpdateManyWithoutUploadNestedInput
}

export type UploadUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedUpdateManyWithoutUploadNestedInput
}

export type UploadCreateManyInput = {
  id?: number
  tenantId: string
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadUpdateManyMutationInput = {
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadListRelationFilter = {
  every?: Prisma.UploadWhereInput
  some?: Prisma.UploadWhereInput
  none?: Prisma.UploadWhereInput
}

export type UploadOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UploadCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  localPath?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  status?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  meta?: Prisma.SortOrder
}

export type UploadAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  size?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
}

export type UploadMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  localPath?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  status?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UploadMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tenantId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  localPath?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  status?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UploadSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  size?: Prisma.SortOrder
  attempts?: Prisma.SortOrder
  maxAttempts?: Prisma.SortOrder
}

export type UploadScalarRelationFilter = {
  is?: Prisma.UploadWhereInput
  isNot?: Prisma.UploadWhereInput
}

export type UploadCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput> | Prisma.UploadCreateWithoutTenantInput[] | Prisma.UploadUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutTenantInput | Prisma.UploadCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.UploadCreateManyTenantInputEnvelope
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
}

export type UploadUncheckedCreateNestedManyWithoutTenantInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput> | Prisma.UploadCreateWithoutTenantInput[] | Prisma.UploadUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutTenantInput | Prisma.UploadCreateOrConnectWithoutTenantInput[]
  createMany?: Prisma.UploadCreateManyTenantInputEnvelope
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
}

export type UploadUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput> | Prisma.UploadCreateWithoutTenantInput[] | Prisma.UploadUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutTenantInput | Prisma.UploadCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.UploadUpsertWithWhereUniqueWithoutTenantInput | Prisma.UploadUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.UploadCreateManyTenantInputEnvelope
  set?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  disconnect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  delete?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  update?: Prisma.UploadUpdateWithWhereUniqueWithoutTenantInput | Prisma.UploadUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.UploadUpdateManyWithWhereWithoutTenantInput | Prisma.UploadUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
}

export type UploadUncheckedUpdateManyWithoutTenantNestedInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput> | Prisma.UploadCreateWithoutTenantInput[] | Prisma.UploadUncheckedCreateWithoutTenantInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutTenantInput | Prisma.UploadCreateOrConnectWithoutTenantInput[]
  upsert?: Prisma.UploadUpsertWithWhereUniqueWithoutTenantInput | Prisma.UploadUpsertWithWhereUniqueWithoutTenantInput[]
  createMany?: Prisma.UploadCreateManyTenantInputEnvelope
  set?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  disconnect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  delete?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  update?: Prisma.UploadUpdateWithWhereUniqueWithoutTenantInput | Prisma.UploadUpdateWithWhereUniqueWithoutTenantInput[]
  updateMany?: Prisma.UploadUpdateManyWithWhereWithoutTenantInput | Prisma.UploadUpdateManyWithWhereWithoutTenantInput[]
  deleteMany?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
}

export type UploadCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput> | Prisma.UploadCreateWithoutUserInput[] | Prisma.UploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUserInput | Prisma.UploadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UploadCreateManyUserInputEnvelope
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
}

export type UploadUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput> | Prisma.UploadCreateWithoutUserInput[] | Prisma.UploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUserInput | Prisma.UploadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UploadCreateManyUserInputEnvelope
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
}

export type UploadUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput> | Prisma.UploadCreateWithoutUserInput[] | Prisma.UploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUserInput | Prisma.UploadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UploadUpsertWithWhereUniqueWithoutUserInput | Prisma.UploadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UploadCreateManyUserInputEnvelope
  set?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  disconnect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  delete?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  update?: Prisma.UploadUpdateWithWhereUniqueWithoutUserInput | Prisma.UploadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UploadUpdateManyWithWhereWithoutUserInput | Prisma.UploadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
}

export type UploadUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput> | Prisma.UploadCreateWithoutUserInput[] | Prisma.UploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUserInput | Prisma.UploadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UploadUpsertWithWhereUniqueWithoutUserInput | Prisma.UploadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UploadCreateManyUserInputEnvelope
  set?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  disconnect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  delete?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  connect?: Prisma.UploadWhereUniqueInput | Prisma.UploadWhereUniqueInput[]
  update?: Prisma.UploadUpdateWithWhereUniqueWithoutUserInput | Prisma.UploadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UploadUpdateManyWithWhereWithoutUserInput | Prisma.UploadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
}

export type EnumUploadStatusFieldUpdateOperationsInput = {
  set?: $Enums.UploadStatus
}

export type UploadCreateNestedOneWithoutUploadAuditInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUploadAuditInput, Prisma.UploadUncheckedCreateWithoutUploadAuditInput>
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUploadAuditInput
  connect?: Prisma.UploadWhereUniqueInput
}

export type UploadUpdateOneRequiredWithoutUploadAuditNestedInput = {
  create?: Prisma.XOR<Prisma.UploadCreateWithoutUploadAuditInput, Prisma.UploadUncheckedCreateWithoutUploadAuditInput>
  connectOrCreate?: Prisma.UploadCreateOrConnectWithoutUploadAuditInput
  upsert?: Prisma.UploadUpsertWithoutUploadAuditInput
  connect?: Prisma.UploadWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UploadUpdateToOneWithWhereWithoutUploadAuditInput, Prisma.UploadUpdateWithoutUploadAuditInput>, Prisma.UploadUncheckedUpdateWithoutUploadAuditInput>
}

export type UploadCreateWithoutTenantInput = {
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  user: Prisma.UserCreateNestedOneWithoutFilesInput
  uploadAudit?: Prisma.UploadAuditCreateNestedManyWithoutUploadInput
}

export type UploadUncheckedCreateWithoutTenantInput = {
  id?: number
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedCreateNestedManyWithoutUploadInput
}

export type UploadCreateOrConnectWithoutTenantInput = {
  where: Prisma.UploadWhereUniqueInput
  create: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput>
}

export type UploadCreateManyTenantInputEnvelope = {
  data: Prisma.UploadCreateManyTenantInput | Prisma.UploadCreateManyTenantInput[]
  skipDuplicates?: boolean
}

export type UploadUpsertWithWhereUniqueWithoutTenantInput = {
  where: Prisma.UploadWhereUniqueInput
  update: Prisma.XOR<Prisma.UploadUpdateWithoutTenantInput, Prisma.UploadUncheckedUpdateWithoutTenantInput>
  create: Prisma.XOR<Prisma.UploadCreateWithoutTenantInput, Prisma.UploadUncheckedCreateWithoutTenantInput>
}

export type UploadUpdateWithWhereUniqueWithoutTenantInput = {
  where: Prisma.UploadWhereUniqueInput
  data: Prisma.XOR<Prisma.UploadUpdateWithoutTenantInput, Prisma.UploadUncheckedUpdateWithoutTenantInput>
}

export type UploadUpdateManyWithWhereWithoutTenantInput = {
  where: Prisma.UploadScalarWhereInput
  data: Prisma.XOR<Prisma.UploadUpdateManyMutationInput, Prisma.UploadUncheckedUpdateManyWithoutTenantInput>
}

export type UploadScalarWhereInput = {
  AND?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
  OR?: Prisma.UploadScalarWhereInput[]
  NOT?: Prisma.UploadScalarWhereInput | Prisma.UploadScalarWhereInput[]
  id?: Prisma.IntFilter<"Upload"> | number
  tenantId?: Prisma.UuidFilter<"Upload"> | string
  userId?: Prisma.UuidFilter<"Upload"> | string
  purpose?: Prisma.StringFilter<"Upload"> | string
  originalName?: Prisma.StringFilter<"Upload"> | string
  filename?: Prisma.StringFilter<"Upload"> | string
  localPath?: Prisma.StringNullableFilter<"Upload"> | string | null
  mimeType?: Prisma.StringFilter<"Upload"> | string
  size?: Prisma.IntFilter<"Upload"> | number
  status?: Prisma.EnumUploadStatusFilter<"Upload"> | $Enums.UploadStatus
  attempts?: Prisma.IntFilter<"Upload"> | number
  maxAttempts?: Prisma.IntFilter<"Upload"> | number
  publicId?: Prisma.StringNullableFilter<"Upload"> | string | null
  url?: Prisma.StringNullableFilter<"Upload"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"Upload"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Upload"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Upload"> | Date | string | null
  meta?: Prisma.JsonNullableFilter<"Upload">
}

export type UploadCreateWithoutUserInput = {
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant: Prisma.TenantCreateNestedOneWithoutFilesInput
  uploadAudit?: Prisma.UploadAuditCreateNestedManyWithoutUploadInput
}

export type UploadUncheckedCreateWithoutUserInput = {
  id?: number
  tenantId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedCreateNestedManyWithoutUploadInput
}

export type UploadCreateOrConnectWithoutUserInput = {
  where: Prisma.UploadWhereUniqueInput
  create: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput>
}

export type UploadCreateManyUserInputEnvelope = {
  data: Prisma.UploadCreateManyUserInput | Prisma.UploadCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UploadUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UploadWhereUniqueInput
  update: Prisma.XOR<Prisma.UploadUpdateWithoutUserInput, Prisma.UploadUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UploadCreateWithoutUserInput, Prisma.UploadUncheckedCreateWithoutUserInput>
}

export type UploadUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UploadWhereUniqueInput
  data: Prisma.XOR<Prisma.UploadUpdateWithoutUserInput, Prisma.UploadUncheckedUpdateWithoutUserInput>
}

export type UploadUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UploadScalarWhereInput
  data: Prisma.XOR<Prisma.UploadUpdateManyMutationInput, Prisma.UploadUncheckedUpdateManyWithoutUserInput>
}

export type UploadCreateWithoutUploadAuditInput = {
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant: Prisma.TenantCreateNestedOneWithoutFilesInput
  user: Prisma.UserCreateNestedOneWithoutFilesInput
}

export type UploadUncheckedCreateWithoutUploadAuditInput = {
  id?: number
  tenantId: string
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadCreateOrConnectWithoutUploadAuditInput = {
  where: Prisma.UploadWhereUniqueInput
  create: Prisma.XOR<Prisma.UploadCreateWithoutUploadAuditInput, Prisma.UploadUncheckedCreateWithoutUploadAuditInput>
}

export type UploadUpsertWithoutUploadAuditInput = {
  update: Prisma.XOR<Prisma.UploadUpdateWithoutUploadAuditInput, Prisma.UploadUncheckedUpdateWithoutUploadAuditInput>
  create: Prisma.XOR<Prisma.UploadCreateWithoutUploadAuditInput, Prisma.UploadUncheckedCreateWithoutUploadAuditInput>
  where?: Prisma.UploadWhereInput
}

export type UploadUpdateToOneWithWhereWithoutUploadAuditInput = {
  where?: Prisma.UploadWhereInput
  data: Prisma.XOR<Prisma.UploadUpdateWithoutUploadAuditInput, Prisma.UploadUncheckedUpdateWithoutUploadAuditInput>
}

export type UploadUpdateWithoutUploadAuditInput = {
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant?: Prisma.TenantUpdateOneRequiredWithoutFilesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutFilesNestedInput
}

export type UploadUncheckedUpdateWithoutUploadAuditInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadCreateManyTenantInput = {
  id?: number
  userId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadUpdateWithoutTenantInput = {
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  user?: Prisma.UserUpdateOneRequiredWithoutFilesNestedInput
  uploadAudit?: Prisma.UploadAuditUpdateManyWithoutUploadNestedInput
}

export type UploadUncheckedUpdateWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedUpdateManyWithoutUploadNestedInput
}

export type UploadUncheckedUpdateManyWithoutTenantInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadCreateManyUserInput = {
  id?: number
  tenantId: string
  purpose: string
  originalName: string
  filename: string
  localPath?: string | null
  mimeType: string
  size: number
  status: $Enums.UploadStatus
  attempts?: number
  maxAttempts?: number
  publicId?: string | null
  url?: string | null
  errorMessage?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type UploadUpdateWithoutUserInput = {
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tenant?: Prisma.TenantUpdateOneRequiredWithoutFilesNestedInput
  uploadAudit?: Prisma.UploadAuditUpdateManyWithoutUploadNestedInput
}

export type UploadUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  uploadAudit?: Prisma.UploadAuditUncheckedUpdateManyWithoutUploadNestedInput
}

export type UploadUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  localPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  attempts?: Prisma.IntFieldUpdateOperationsInput | number
  maxAttempts?: Prisma.IntFieldUpdateOperationsInput | number
  publicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type UploadCountOutputType
 */

export type UploadCountOutputType = {
  uploadAudit: number
}

export type UploadCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  uploadAudit?: boolean | UploadCountOutputTypeCountUploadAuditArgs
}

/**
 * UploadCountOutputType without action
 */
export type UploadCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadCountOutputType
   */
  select?: Prisma.UploadCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UploadCountOutputType without action
 */
export type UploadCountOutputTypeCountUploadAuditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UploadAuditWhereInput
}


export type UploadSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  userId?: boolean
  purpose?: boolean
  originalName?: boolean
  filename?: boolean
  localPath?: boolean
  mimeType?: boolean
  size?: boolean
  status?: boolean
  attempts?: boolean
  maxAttempts?: boolean
  publicId?: boolean
  url?: boolean
  errorMessage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meta?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  uploadAudit?: boolean | Prisma.Upload$uploadAuditArgs<ExtArgs>
  _count?: boolean | Prisma.UploadCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["upload"]>

export type UploadSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  userId?: boolean
  purpose?: boolean
  originalName?: boolean
  filename?: boolean
  localPath?: boolean
  mimeType?: boolean
  size?: boolean
  status?: boolean
  attempts?: boolean
  maxAttempts?: boolean
  publicId?: boolean
  url?: boolean
  errorMessage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meta?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["upload"]>

export type UploadSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tenantId?: boolean
  userId?: boolean
  purpose?: boolean
  originalName?: boolean
  filename?: boolean
  localPath?: boolean
  mimeType?: boolean
  size?: boolean
  status?: boolean
  attempts?: boolean
  maxAttempts?: boolean
  publicId?: boolean
  url?: boolean
  errorMessage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meta?: boolean
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["upload"]>

export type UploadSelectScalar = {
  id?: boolean
  tenantId?: boolean
  userId?: boolean
  purpose?: boolean
  originalName?: boolean
  filename?: boolean
  localPath?: boolean
  mimeType?: boolean
  size?: boolean
  status?: boolean
  attempts?: boolean
  maxAttempts?: boolean
  publicId?: boolean
  url?: boolean
  errorMessage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meta?: boolean
}

export type UploadOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tenantId" | "userId" | "purpose" | "originalName" | "filename" | "localPath" | "mimeType" | "size" | "status" | "attempts" | "maxAttempts" | "publicId" | "url" | "errorMessage" | "createdAt" | "updatedAt" | "meta", ExtArgs["result"]["upload"]>
export type UploadInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  uploadAudit?: boolean | Prisma.Upload$uploadAuditArgs<ExtArgs>
  _count?: boolean | Prisma.UploadCountOutputTypeDefaultArgs<ExtArgs>
}
export type UploadIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UploadIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tenant?: boolean | Prisma.TenantDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UploadPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Upload"
  objects: {
    tenant: Prisma.$TenantPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
    uploadAudit: Prisma.$UploadAuditPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tenantId: string
    userId: string
    purpose: string
    originalName: string
    filename: string
    localPath: string | null
    mimeType: string
    size: number
    status: $Enums.UploadStatus
    attempts: number
    maxAttempts: number
    publicId: string | null
    url: string | null
    errorMessage: string | null
    createdAt: Date
    updatedAt: Date | null
    meta: runtime.JsonValue | null
  }, ExtArgs["result"]["upload"]>
  composites: {}
}

export type UploadGetPayload<S extends boolean | null | undefined | UploadDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UploadPayload, S>

export type UploadCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UploadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UploadCountAggregateInputType | true
  }

export interface UploadDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Upload'], meta: { name: 'Upload' } }
  /**
   * Find zero or one Upload that matches the filter.
   * @param {UploadFindUniqueArgs} args - Arguments to find a Upload
   * @example
   * // Get one Upload
   * const upload = await prisma.upload.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UploadFindUniqueArgs>(args: Prisma.SelectSubset<T, UploadFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Upload that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UploadFindUniqueOrThrowArgs} args - Arguments to find a Upload
   * @example
   * // Get one Upload
   * const upload = await prisma.upload.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UploadFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UploadFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Upload that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadFindFirstArgs} args - Arguments to find a Upload
   * @example
   * // Get one Upload
   * const upload = await prisma.upload.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UploadFindFirstArgs>(args?: Prisma.SelectSubset<T, UploadFindFirstArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Upload that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadFindFirstOrThrowArgs} args - Arguments to find a Upload
   * @example
   * // Get one Upload
   * const upload = await prisma.upload.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UploadFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UploadFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Uploads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Uploads
   * const uploads = await prisma.upload.findMany()
   * 
   * // Get first 10 Uploads
   * const uploads = await prisma.upload.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const uploadWithIdOnly = await prisma.upload.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UploadFindManyArgs>(args?: Prisma.SelectSubset<T, UploadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Upload.
   * @param {UploadCreateArgs} args - Arguments to create a Upload.
   * @example
   * // Create one Upload
   * const Upload = await prisma.upload.create({
   *   data: {
   *     // ... data to create a Upload
   *   }
   * })
   * 
   */
  create<T extends UploadCreateArgs>(args: Prisma.SelectSubset<T, UploadCreateArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Uploads.
   * @param {UploadCreateManyArgs} args - Arguments to create many Uploads.
   * @example
   * // Create many Uploads
   * const upload = await prisma.upload.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UploadCreateManyArgs>(args?: Prisma.SelectSubset<T, UploadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Uploads and returns the data saved in the database.
   * @param {UploadCreateManyAndReturnArgs} args - Arguments to create many Uploads.
   * @example
   * // Create many Uploads
   * const upload = await prisma.upload.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Uploads and only return the `id`
   * const uploadWithIdOnly = await prisma.upload.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UploadCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UploadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Upload.
   * @param {UploadDeleteArgs} args - Arguments to delete one Upload.
   * @example
   * // Delete one Upload
   * const Upload = await prisma.upload.delete({
   *   where: {
   *     // ... filter to delete one Upload
   *   }
   * })
   * 
   */
  delete<T extends UploadDeleteArgs>(args: Prisma.SelectSubset<T, UploadDeleteArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Upload.
   * @param {UploadUpdateArgs} args - Arguments to update one Upload.
   * @example
   * // Update one Upload
   * const upload = await prisma.upload.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UploadUpdateArgs>(args: Prisma.SelectSubset<T, UploadUpdateArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Uploads.
   * @param {UploadDeleteManyArgs} args - Arguments to filter Uploads to delete.
   * @example
   * // Delete a few Uploads
   * const { count } = await prisma.upload.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UploadDeleteManyArgs>(args?: Prisma.SelectSubset<T, UploadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Uploads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Uploads
   * const upload = await prisma.upload.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UploadUpdateManyArgs>(args: Prisma.SelectSubset<T, UploadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Uploads and returns the data updated in the database.
   * @param {UploadUpdateManyAndReturnArgs} args - Arguments to update many Uploads.
   * @example
   * // Update many Uploads
   * const upload = await prisma.upload.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Uploads and only return the `id`
   * const uploadWithIdOnly = await prisma.upload.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UploadUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UploadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Upload.
   * @param {UploadUpsertArgs} args - Arguments to update or create a Upload.
   * @example
   * // Update or create a Upload
   * const upload = await prisma.upload.upsert({
   *   create: {
   *     // ... data to create a Upload
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Upload we want to update
   *   }
   * })
   */
  upsert<T extends UploadUpsertArgs>(args: Prisma.SelectSubset<T, UploadUpsertArgs<ExtArgs>>): Prisma.Prisma__UploadClient<runtime.Types.Result.GetResult<Prisma.$UploadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Uploads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadCountArgs} args - Arguments to filter Uploads to count.
   * @example
   * // Count the number of Uploads
   * const count = await prisma.upload.count({
   *   where: {
   *     // ... the filter for the Uploads we want to count
   *   }
   * })
  **/
  count<T extends UploadCountArgs>(
    args?: Prisma.Subset<T, UploadCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UploadCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Upload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UploadAggregateArgs>(args: Prisma.Subset<T, UploadAggregateArgs>): Prisma.PrismaPromise<GetUploadAggregateType<T>>

  /**
   * Group by Upload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UploadGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UploadGroupByArgs['orderBy'] }
      : { orderBy?: UploadGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UploadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUploadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Upload model
 */
readonly fields: UploadFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Upload.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UploadClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tenant<T extends Prisma.TenantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TenantDefaultArgs<ExtArgs>>): Prisma.Prisma__TenantClient<runtime.Types.Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  uploadAudit<T extends Prisma.Upload$uploadAuditArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Upload$uploadAuditArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Upload model
 */
export interface UploadFieldRefs {
  readonly id: Prisma.FieldRef<"Upload", 'Int'>
  readonly tenantId: Prisma.FieldRef<"Upload", 'String'>
  readonly userId: Prisma.FieldRef<"Upload", 'String'>
  readonly purpose: Prisma.FieldRef<"Upload", 'String'>
  readonly originalName: Prisma.FieldRef<"Upload", 'String'>
  readonly filename: Prisma.FieldRef<"Upload", 'String'>
  readonly localPath: Prisma.FieldRef<"Upload", 'String'>
  readonly mimeType: Prisma.FieldRef<"Upload", 'String'>
  readonly size: Prisma.FieldRef<"Upload", 'Int'>
  readonly status: Prisma.FieldRef<"Upload", 'UploadStatus'>
  readonly attempts: Prisma.FieldRef<"Upload", 'Int'>
  readonly maxAttempts: Prisma.FieldRef<"Upload", 'Int'>
  readonly publicId: Prisma.FieldRef<"Upload", 'String'>
  readonly url: Prisma.FieldRef<"Upload", 'String'>
  readonly errorMessage: Prisma.FieldRef<"Upload", 'String'>
  readonly createdAt: Prisma.FieldRef<"Upload", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Upload", 'DateTime'>
  readonly meta: Prisma.FieldRef<"Upload", 'Json'>
}
    

// Custom InputTypes
/**
 * Upload findUnique
 */
export type UploadFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter, which Upload to fetch.
   */
  where: Prisma.UploadWhereUniqueInput
}

/**
 * Upload findUniqueOrThrow
 */
export type UploadFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter, which Upload to fetch.
   */
  where: Prisma.UploadWhereUniqueInput
}

/**
 * Upload findFirst
 */
export type UploadFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter, which Upload to fetch.
   */
  where?: Prisma.UploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Uploads to fetch.
   */
  orderBy?: Prisma.UploadOrderByWithRelationInput | Prisma.UploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Uploads.
   */
  cursor?: Prisma.UploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Uploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Uploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Uploads.
   */
  distinct?: Prisma.UploadScalarFieldEnum | Prisma.UploadScalarFieldEnum[]
}

/**
 * Upload findFirstOrThrow
 */
export type UploadFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter, which Upload to fetch.
   */
  where?: Prisma.UploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Uploads to fetch.
   */
  orderBy?: Prisma.UploadOrderByWithRelationInput | Prisma.UploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Uploads.
   */
  cursor?: Prisma.UploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Uploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Uploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Uploads.
   */
  distinct?: Prisma.UploadScalarFieldEnum | Prisma.UploadScalarFieldEnum[]
}

/**
 * Upload findMany
 */
export type UploadFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter, which Uploads to fetch.
   */
  where?: Prisma.UploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Uploads to fetch.
   */
  orderBy?: Prisma.UploadOrderByWithRelationInput | Prisma.UploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Uploads.
   */
  cursor?: Prisma.UploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Uploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Uploads.
   */
  skip?: number
  distinct?: Prisma.UploadScalarFieldEnum | Prisma.UploadScalarFieldEnum[]
}

/**
 * Upload create
 */
export type UploadCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * The data needed to create a Upload.
   */
  data: Prisma.XOR<Prisma.UploadCreateInput, Prisma.UploadUncheckedCreateInput>
}

/**
 * Upload createMany
 */
export type UploadCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Uploads.
   */
  data: Prisma.UploadCreateManyInput | Prisma.UploadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Upload createManyAndReturn
 */
export type UploadCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * The data used to create many Uploads.
   */
  data: Prisma.UploadCreateManyInput | Prisma.UploadCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Upload update
 */
export type UploadUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * The data needed to update a Upload.
   */
  data: Prisma.XOR<Prisma.UploadUpdateInput, Prisma.UploadUncheckedUpdateInput>
  /**
   * Choose, which Upload to update.
   */
  where: Prisma.UploadWhereUniqueInput
}

/**
 * Upload updateMany
 */
export type UploadUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Uploads.
   */
  data: Prisma.XOR<Prisma.UploadUpdateManyMutationInput, Prisma.UploadUncheckedUpdateManyInput>
  /**
   * Filter which Uploads to update
   */
  where?: Prisma.UploadWhereInput
  /**
   * Limit how many Uploads to update.
   */
  limit?: number
}

/**
 * Upload updateManyAndReturn
 */
export type UploadUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * The data used to update Uploads.
   */
  data: Prisma.XOR<Prisma.UploadUpdateManyMutationInput, Prisma.UploadUncheckedUpdateManyInput>
  /**
   * Filter which Uploads to update
   */
  where?: Prisma.UploadWhereInput
  /**
   * Limit how many Uploads to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Upload upsert
 */
export type UploadUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * The filter to search for the Upload to update in case it exists.
   */
  where: Prisma.UploadWhereUniqueInput
  /**
   * In case the Upload found by the `where` argument doesn't exist, create a new Upload with this data.
   */
  create: Prisma.XOR<Prisma.UploadCreateInput, Prisma.UploadUncheckedCreateInput>
  /**
   * In case the Upload was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UploadUpdateInput, Prisma.UploadUncheckedUpdateInput>
}

/**
 * Upload delete
 */
export type UploadDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
  /**
   * Filter which Upload to delete.
   */
  where: Prisma.UploadWhereUniqueInput
}

/**
 * Upload deleteMany
 */
export type UploadDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Uploads to delete
   */
  where?: Prisma.UploadWhereInput
  /**
   * Limit how many Uploads to delete.
   */
  limit?: number
}

/**
 * Upload.uploadAudit
 */
export type Upload$uploadAuditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadAudit
   */
  select?: Prisma.UploadAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadAudit
   */
  omit?: Prisma.UploadAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadAuditInclude<ExtArgs> | null
  where?: Prisma.UploadAuditWhereInput
  orderBy?: Prisma.UploadAuditOrderByWithRelationInput | Prisma.UploadAuditOrderByWithRelationInput[]
  cursor?: Prisma.UploadAuditWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UploadAuditScalarFieldEnum | Prisma.UploadAuditScalarFieldEnum[]
}

/**
 * Upload without action
 */
export type UploadDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Upload
   */
  select?: Prisma.UploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Upload
   */
  omit?: Prisma.UploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UploadInclude<ExtArgs> | null
}
